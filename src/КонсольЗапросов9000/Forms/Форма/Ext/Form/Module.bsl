// Консоль запросов 9000 v 1.1.8
// (C) Александр Кузнецов 2019-2020
// hal@hal9000.cc
//Минимальная версия платформы 8.3.12, минимальный режим совместимости 8.3.8

&НаКлиенте
Перем стрСигнатураКонсоли;
&НаКлиенте
Перем чВерсияФормата;
&НаКлиенте
Перем стрФильтрСохранения;
&НаКлиенте
Перем стрРасширениеАвтосохранения;
&НаКлиенте
Перем фУдаленФайлАвтосохранения;//для ЗагрузитьПакетЗапросовПослеВопроса
&НаКлиенте
Перем фУдаленФайлСостояния;//для ЗагрузитьПакетЗапросовПослеВопроса

//Типы контейнера в ПараметрахЗапроса: 0 - нет, 1 - список значений, 2 - массив, 3 - таблица значений.

&НаКлиенте
Функция ПолучитьИмяФайлаАвтосохранения(стрИмяФайла)
	Файл = Новый Файл(стрИмяФайла);
	Возврат Файл.Путь + Файл.ИмяБезРасширения + "." + стрРасширениеАвтосохранения;
КонецФункции

&НаКлиенте
Функция ВремяИзСекунд(Секунды)
	стрВремяСекунды = Формат(Секунды % 60, "ЧЦ=2; ЧН=; ЧВН=");
	Минуты = Цел(Секунды / 60);
	стрВремяМинуты = Формат(Минуты % 60, "ЧЦ=2; ЧН=; ЧВН=");
	Часы = Цел(Минуты / 60);
	стрВремяЧасы = Формат(Часы, "ЧН=00; ЧГ=");
	Возврат СтрШаблон("%1:%2:%3", стрВремяЧасы, стрВремяМинуты, стрВремяСекунды);
КонецФункции

&НаСервере
Функция ПоместитьОбработкуНаСервер(Адрес)
	
	Файл = Новый Файл(Объект.ИмяФайлаОбработки);
	стрИмяФайлаОбработкиНаСервере = КаталогВременныхФайлов() + Файл.ИмяБезРасширения + "_" + Объект.ВерсияОбработки + Файл.Расширение;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(стрИмяФайлаОбработкиНаСервере);
	
	Возврат стрИмяФайлаОбработкиНаСервере;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаОбработкиНаСервере()
	
	Если ЗначениеЗаполнено(ИмяФайлаОбработкиНаСервере) Тогда
		Возврат ИмяФайлаОбработкиНаСервере;
	КонецЕсли;
	
	Адрес = "";
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ПоместитьОбработкуНаСерверПродолжение", ЭтаФорма), Адрес, Объект.ИмяФайлаОбработки, Ложь);

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПоместитьОбработкуНаСерверПродолжение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	ИмяФайлаОбработкиНаСервере = ПоместитьОбработкуНаСервер(Адрес);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматироватьДлительность(ДлительностьВМиллисекундах)
	
	Возврат СтрШаблон("%1.%2",
		Формат('00010101' + Цел((ДлительностьВМиллисекундах)/1000), "ДЛФ=T; ДП=0:00:00"),
		Формат(ДлительностьВМиллисекундах - Цел((ДлительностьВМиллисекундах) / 1000) * 1000, "ЧЦ=3; ЧН=; ЧВН="));
		
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповПоТипу(Тип)
	маТипы = Новый Массив;
	маТипы.Добавить(Тип);
	Возврат Новый ОписаниеТипов(маТипы);
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКорректно(стрИмя)
	
	Попытка
		ст = Новый Структура(стрИмя);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодФормыЗначения(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Массив") Тогда
		Возврат 2;
	ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
		Возврат 1;
	ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
		Возврат 3;
	КонецЕсли;
		
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка)
		
	маЧасти = СтрРазделить(стрОшибка, ":");
	маКоординаты = Неопределено;
	Если маЧасти.Количество() > 2 Тогда
		стрКоординатыОшибки = СокрЛП(маЧасти[2]);
		Если маЧасти.Количество() > 2 И СтрДлина(стрКоординатыОшибки) > 5 И Лев(стрКоординатыОшибки, 2) = "{(" Тогда
			маКоординаты = СтрРазделить(Сред(стрКоординатыОшибки, 3, СтрДлина(стрКоординатыОшибки) - 4), ",");
			маЧасти[0] = "";
			маЧасти[1] = "";
		Иначе
			маЧасти[0] = "";
		КонецЕсли;
	КонецЕсли;
	
	стрРазделитель = ": ";
	стрОшибка = СтрСоединить(маЧасти, стрРазделитель);
	Пока Лев(стрОшибка, СтрДлина(стрРазделитель)) = стрРазделитель Цикл
		стрОшибка = Прав(стрОшибка, СтрДлина(стрОшибка) - СтрДлина(стрРазделитель));
	КонецЦикла;
	
	чСтрока = Неопределено;
	чКолонка = Неопределено;
	Если маКоординаты <> Неопределено Тогда
		чСтрока = Число(маКоординаты[0]);
		чКолонка = Число(маКоординаты[1]);
	КонецЕсли;

КонецПроцедуры

//Уточняет место ошибки в тексте запроса по оригинальному тексту запроса, попытавшись выполнить его.
//стрОшибка - уже произошедшая ошибка (возвращает уточнение)
//зЗапрос - запрос с параметрами (текст не важен)
//стрОригинальныйТекстЗапроса - оригинальный текст запроса
//чСтрока, чКолонка - место ошибки (возвращаемое значение)
&НаСервереБезКонтекста
Процедура РазобратьОшибкуЗапросаСУточнением(стрОшибка, зЗапрос, стрОригинальныйТекстЗапроса, чСтрока, чКолонка)
	
	РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка);
	стрОшибкаРеальная = стрОшибка;
	чСтрокаРеальная = чСтрока;
	чКолонкаРеальная = чКолонка;
	
	зЗапрос.Текст = стрОригинальныйТекстЗапроса;
	Попытка
		зЗапрос.НайтиПараметры();
		зЗапрос.Выполнить();
	Исключение
		стрОшибка = ОписаниеОшибки();
	КонецПопытки;
	
	РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка);

	маЧастиРеальной = СтрРазделить(стрОшибкаРеальная, ":");
	маЧастиУточненной = СтрРазделить(стрОшибка, ":");
	Если маЧастиРеальной.Количество() = маЧастиУточненной.Количество()
		 И маЧастиРеальной.Количество() > 1
		 И маЧастиРеальной[1] = маЧастиУточненной[1]
		 Тогда
		 	//Все совпало, ошибку воспроизвели на оригинальном запросе, сообщения и позиция верные.
		 	Возврат;
	КонецЕсли;
	
	стрОшибка = стрОшибкаРеальная;
	чСтрока = чСтрокаРеальная;
	чКолонка = чКолонкаРеальная;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматироватьТекстЗапросаНаСервере(стрТекстЗапроса)
	Перем чСтрока, чКолонка;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	Попытка
		СхемаЗапроса.УстановитьТекстЗапроса(стрТекстЗапроса);
	Исключение
		
		стрОшибка = ОписаниеОшибки();
		РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка);
		Возврат Новый Структура("ОписаниеОшибки, Строка, Колонка", стрОшибка, чСтрока, чКолонка);
		
	КонецПопытки;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокФайловНаСервереВоВременных(стрМаска)
	
	маФайлыЗапросов = НайтиФайлы(КаталогВременныхФайлов(), стрМаска);
	
	маИменаФайлов = Новый Массив;
	Для Каждого Файл Из маФайлыЗапросов Цикл
		маИменаФайлов.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	Возврат маИменаФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьФайлыНаСервере(маФайлы)
	Для Каждого стрФайл Из маФайлы Цикл 
		УдалитьФайлы(стрФайл);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НужнаКнопкаВыбораЗначению(Значение)
	
	маТипыБезКнопкиВыбора = Новый Массив;
	маТипыБезКнопкиВыбора.Добавить(Тип("Строка"));
	маТипыБезКнопкиВыбора.Добавить(Тип("Число"));
	маТипыБезКнопкиВыбора.Добавить(Тип("Булево"));
	маТипыБезКнопкиВыбора.Добавить(Тип("ВидДвиженияНакопления"));
	маТипыБезКнопкиВыбора.Добавить(Тип("ВидДвиженияБухгалтерии"));
	маТипыБезКнопкиВыбора.Добавить(Тип("ВидСчета"));
	ТипыБезКнопкийВыбора = Новый ОписаниеТипов(маТипыБезКнопкиВыбора);
	
	Возврат НЕ ТипыБезКнопкийВыбора.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке)
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.ИмяМодуля) И ЗначениеЗаполнено(ИнформацияОбОшибке.НомерСтроки) Тогда
		стрИнформация = ИнформацияОбОшибке.ИмяМодуля + СтрШаблон(" строка %1", ИнформацияОбОшибке.НомерСтроки) + "
			|";
	ИначеЕсли ЗначениеЗаполнено(ИнформацияОбОшибке.НомерСтроки) Тогда
		стрИнформация = СтрШаблон("Строка %1", ИнформацияОбОшибке.НомерСтроки) + "
			|";
	Иначе
		стрИнформация = "";
	КонецЕсли;
		
	стрИнформация = стрИнформация + ИнформацияОбОшибке.Описание + ":
		|" + ИнформацияОбОшибке.ИсходнаяСтрока;
		
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		стрИнформация = стрИнформация + "
		|" + ПолучитьПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке.Причина);
	КонецЕсли;

	Возврат стрИнформация;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаФормаПриИзмененииСЗИзТЗ(Контейнер)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	тзТаблица = Обработка.Контейнер_ВосстановитьЗначение(Контейнер);
	сзСписок = Новый СписокЗначений;
	Если тзТаблица.Колонки.Количество() > 0 Тогда
		сзСписок.ЗагрузитьЗначения(тзТаблица.ВыгрузитьКолонку(0));
	КонецЕсли;
	
	Возврат Обработка.Контейнер_СохранитьЗначение(сзСписок);
	
КонецФункции

&НаСервере
Функция ПодготовитьВыборкуКолонокСТипомТип(тзДанные)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	стКолонкиСТипомТип = Новый Структура;
	
	Для Каждого Колонка Из тзДанные.Колонки Цикл
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
			
			стрИмяКолонки = Колонка.Имя;
			стрИмяКолонкиТип = стрИмяКолонки + "_Тип31415926";
			стрИмяКолонкиВременной = стрИмяКолонки + "_Вр31415926";
			
			маВычитаемыеТипы = Новый Массив;
			маВычитаемыеТипы.Добавить(Тип("Тип"));
			маДобавляемыеТипы = Новый Массив;
			маДобавляемыеТипы.Добавить(Тип("Null"));
			ТипБезТипаТип = Новый ОписаниеТипов(Колонка.ТипЗначения, маДобавляемыеТипы, маВычитаемыеТипы);
			фТолькоТип = ТипБезТипаТип = Новый ОписаниеТипов("Null");//Значит, что в колонке был только тип.
			                                                         //Вообще, так должно быть всегда. Не представляю ситуации, когда в колонке с типом может быть что-то еще.
			
			тзДанные.Колонки.Добавить(стрИмяКолонкиТип);
			Если НЕ фТолькоТип Тогда
				тзДанные.Колонки.Добавить(стрИмяКолонкиВременной, ТипБезТипаТип);
			КонецЕсли;
			
			маТипы = Новый Массив;
			
			Если фТолькоТип Тогда
				
				Для Каждого СтрокаДанных Из тзДанные Цикл
					маТипы.Добавить(СтрокаДанных[стрИмяКолонки]);
					ОписаниеТипа = ОписаниеТиповПоТипу(СтрокаДанных[стрИмяКолонки]);
					Значение = ОписаниеТипа.ПривестиЗначение(Неопределено);
					СтрокаДанных[стрИмяКолонкиТип] = Значение;
				КонецЦикла;
				
			Иначе
			
				Для Каждого СтрокаДанных Из тзДанные Цикл
					Если ТипЗнч(СтрокаДанных[стрИмяКолонки]) = Тип("Тип") Тогда
						маТипы.Добавить(СтрокаДанных[стрИмяКолонки]);
						ОписаниеТипа = ОписаниеТиповПоТипу(СтрокаДанных[стрИмяКолонки]);
						Значение = ОписаниеТипа.ПривестиЗначение(Неопределено);
						СтрокаДанных[стрИмяКолонкиТип] = Значение;
						СтрокаДанных[стрИмяКолонкиВременной] = Null;
					Иначе
						СтрокаДанных[стрИмяКолонкиВременной] = СтрокаДанных[стрИмяКолонки];
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			тзДанные.Колонки.Удалить(стрИмяКолонки);
			Если НЕ фТолькоТип Тогда
				тзДанные.Колонки[стрИмяКолонкиВременной].Имя = стрИмяКолонки;
			КонецЕсли;
			
			ТипКолонкиТипа = Новый ОписаниеТипов(маТипы);
			Обработка.ИзменитьТипКолонкиТаблицыЗначений(тзДанные, стрИмяКолонкиТип, ТипКолонкиТипа);
			
			Если фТолькоТип Тогда
				стКолонкиСТипомТип.Вставить(стрИмяКолонкиТип, "ТИПЗНАЧЕНИЯ(Таблица." + стрИмяКолонкиТип + ") КАК " + стрИмяКолонки);
			Иначе
				стКолонкиСТипомТип.Вставить(стрИмяКолонкиТип, "ISNULL(Таблица." + стрИмяКолонки + ", ТИПЗНАЧЕНИЯ(Таблица." + стрИмяКолонкиТип + ")) КАК " + стрИмяКолонки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат стКолонкиСТипомТип;
	
КонецФункции

&НаСервере
Процедура УстановитьТипКолонокБезТипа(тзДанные)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ПустойТип = Новый ОписаниеТипов;
	маНеЗначащиеТипы = Новый Массив;
	маНеЗначащиеТипы.Добавить("Неопределено");
	маНеЗначащиеТипы.Добавить("Null");
	
	маОбрабатываемыеКолонки = Новый Массив;
	маТипыКолонок = Новый Массив;
	Для Каждого Колонка Из тзДанные.Колонки Цикл
		маТипы = Колонка.ТипЗначения.Типы();
		Если Колонка.ТипЗначения = ПустойТип Тогда
			маОбрабатываемыеКолонки.Добавить(Колонка.Имя);
			маТипыКолонок.Добавить(Новый Массив);
		КонецЕсли;
	КонецЦикла;
	
	Если маОбрабатываемыеКолонки.Количество() > 0 Тогда
		
		Для Каждого Строка Из тзДанные Цикл
			Для й = 0 По маОбрабатываемыеКолонки.Количество() - 1 Цикл
				стрИмяКолонки = маОбрабатываемыеКолонки[й];
				маТипыКолонок[й].Добавить(ТипЗнч(Строка[стрИмяКолонки]));
			КонецЦикла;
		КонецЦикла;
		
		Для й = 0 По маОбрабатываемыеКолонки.Количество() - 1 Цикл
			
			стрИмяКолонки = маОбрабатываемыеКолонки[й];
			стрИмяВременнойКолонки = стрИмяКолонки + "_Вр31415926";
			
			СтарыйТипЗначения = тзДанные.Колонки[стрИмяКолонки].ТипЗначения;
			НовыйТипКолонки = Новый ОписаниеТипов(
				маТипыКолонок[й],
				СтарыйТипЗначения.КвалификаторыЧисла,
				СтарыйТипЗначения.КвалификаторыСтроки,
				СтарыйТипЗначения.КвалификаторыДаты,
				СтарыйТипЗначения.КвалификаторыДвоичныхДанных);
			
			ЗначимыеТипы = Новый ОписаниеТипов(НовыйТипКолонки, , маНеЗначащиеТипы);
			Если ЗначимыеТипы = ПустойТип Тогда
				НовыйТипКолонки = Новый ОписаниеТипов(НовыйТипКолонки, "Число");//нужно поставить хоть какой-то тип, иначе в запросе не загрузить...
				//Сообщить(Строка(стрИмяКолонки) + " - тип колонки не определен, установлено число.");//отладка
			КонецЕсли;
			
			Обработка.ИзменитьТипКолонкиТаблицыЗначений(тзДанные, стрИмяКолонки, НовыйТипКолонки);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Функция ЗагрузитьВременнуюТаблицу(стрИмяТаблицы, тзДанные, маЗапросыЗагрузки, зЗапросЗагрузкиТаблиц)
	
	УстановитьТипКолонокБезТипа(тзДанные);
	
	стПоляСТипомТип = ПодготовитьВыборкуКолонокСТипомТип(тзДанные);
	Если стПоляСТипомТип.Количество() > 0 Тогда
		
		стрИмяПромежуточнойТаблицы = стрИмяТаблицы + "_Вр31415926";
		
		маВыраженияПолей = Новый Массив;
		Для Каждого Колонка Из тзДанные.Колонки Цикл
			стрВыражение = "Таблица." + Колонка.Имя + " КАК " + Колонка.Имя;
			маВыраженияПолей.Добавить(стрВыражение);
		КонецЦикла;
		стрВыраженияПолей = СтрСоединить(маВыраженияПолей, ",
		|");
		
		маЗапросыЗагрузки.Добавить("
			|ВЫБРАТЬ
			|" + стрВыраженияПолей + "
			|ПОМЕСТИТЬ " + стрИмяПромежуточнойТаблицы + "
			|ИЗ &" + стрИмяТаблицы + " КАК Таблица");
		
		стрИсточник = стрИмяПромежуточнойТаблицы;
		
	Иначе
		стрИсточник = "&" + стрИмяТаблицы;
	КонецЕсли;
	
	стрВыражение = Неопределено;
	маВыраженияПолей = Новый Массив;
	Для Каждого Колонка Из тзДанные.Колонки Цикл
		Если НЕ стПоляСТипомТип.Свойство(Колонка.Имя, стрВыражение) Тогда
			стрВыражение = "Таблица." + Колонка.Имя + " КАК " + Колонка.Имя;
		КонецЕсли;
		маВыраженияПолей.Добавить(стрВыражение);
	КонецЦикла;
	стрВыраженияПолей = СтрСоединить(маВыраженияПолей, ",
	|");
	
	маЗапросыЗагрузки.Добавить("
		|ВЫБРАТЬ
		|" + стрВыраженияПолей + "
		|ПОМЕСТИТЬ " + стрИмяТаблицы + "
		|ИЗ " + стрИсточник + " КАК Таблица");
		
	зЗапросЗагрузкиТаблиц.УстановитьПараметр(стрИмяТаблицы, тзДанные);
		
КонецФункции

&НаСервере
Функция ЗагрузитьВременныеТаблицы()
	
	Если ВременныеТаблицы.Количество() = 0 Тогда
		Возврат Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	зЗапросЗагрузкиТаблиц = Новый Запрос;
	зЗапросЗагрузкиТаблиц.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	маЗапросыЗагрузки = Новый Массив;
	Для Каждого СтрокаВременнаяТаблица Из ВременныеТаблицы Цикл
		
		стрИмяТаблицы = СтрокаВременнаяТаблица.Имя;
		тзДанные = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(СтрокаВременнаяТаблица.Контейнер);
		ЗагрузитьВременнуюТаблицу(стрИмяТаблицы, тзДанные, маЗапросыЗагрузки, зЗапросЗагрузкиТаблиц);
		
	КонецЦикла;
	
	зЗапросЗагрузкиТаблиц.Текст = СтрСоединить(маЗапросыЗагрузки, ";
		|");
	
	зЗапросЗагрузкиТаблиц.Выполнить();
	
	Возврат зЗапросЗагрузкиТаблиц.МенеджерВременныхТаблиц;
	
КонецФункции

&НаСервере
Процедура ВыборкуВДерево(выбВыборка, Узел, й, фЕстьКонтейнеры, Обработка, фЕстьМакроколонки, стМакроколонки)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Пока выбВыборка.Следующий() Цикл
		
		й = й + 1;
		
		Если ОграничениеВыводимыхСтрок > 0 И й > ОграничениеВыводимыхСтрок Тогда
			Прервать;
		КонецЕсли;
		
		РезультатЗапросаСтрока = ЭлементыУзла.Добавить();
		ЗаполнитьЗначенияСвойств(РезультатЗапросаСтрока, выбВыборка);
		
		Если фЕстьКонтейнеры Тогда
			Обработка.ДобавитьКонтейнеры(РезультатЗапросаСтрока, выбВыборка, РезультатЗапросаКолонкиКонтейнера);
		КонецЕсли;
		
		Если фЕстьМакроколонки Тогда
			Обработка.ОбработатьМакроколонки(РезультатЗапросаСтрока, выбВыборка, стМакроколонки);
		КонецЕсли;
				
		выбПодчиненные = выбВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если выбПодчиненные.Количество() > 0 Тогда
			ВыборкуВДерево(выбПодчиненные, РезультатЗапросаСтрока, й, фЕстьКонтейнеры, Обработка, фЕстьМакроколонки, стМакроколонки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
			
&НаСервере
Функция ИзвлечьРезультатКакТаблицуЗначений()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	маРезультатЗапроса = стРезультатЗапроса.Результат;
	стРезультатПакета = маРезультатЗапроса[Число(РезультатВПакете) - 1];
	рзВыборка = стРезультатПакета.Результат;
	стМакроколонки = стРезультатПакета.Макроколонки;
	фЕстьМакроколонки = стМакроколонки.Количество() > 0;

	Если фЕстьМакроколонки Тогда
		
		тзРезультат = Новый ТаблицаЗначений;

		Для Каждого Колонка Из рзВыборка.Колонки Цикл
			тзРезультат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
		выбВыборка = рзВыборка.Выбрать();
		Пока выбВыборка.Следующий() Цикл
			Строка = тзРезультат.Добавить();
		    ЗаполнитьЗначенияСвойств(Строка, выбВыборка);
			Обработка.ОбработатьМакроколонки(Строка, выбВыборка, стМакроколонки);
		КонецЦикла;
		
	Иначе
		тзРезультат = рзВыборка.Выгрузить();
	КонецЕсли;
	
	Возврат тзРезультат;
		
КонецФункции

&НаСервере
Функция ИзвлечьРезультатКакКонтейнер(фУдалитьТипNull = Истина)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	тз = ИзвлечьРезультатКакТаблицуЗначений();
	Обработка.ТаблицаЗначений_УдалитьТипNull(тз);
	
	Возврат Обработка.Контейнер_СохранитьЗначение(тз);
	
КонецФункции

&НаСервере
Процедура СтруктураЗаписиРезультата_РаскрытьПодчиненныеУзлы(Строка)
	Перем Картинки;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	СтрокаДерева = СтруктураЗаписиРезультата.НайтиПоИдентификатору(Строка);
	
	Для Каждого ЭлементСтруктуры Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(ЭлементСтруктуры.Тип) = Тип("ОписаниеТипов") Тогда
			
			соСчетчики = Новый Соответствие;
			соТипы = Новый Соответствие;
			
			ТипыБезПустых = Обработка.ТипБезПустых(ЭлементСтруктуры.Тип);
			маТипы = ТипыБезПустых.Типы();
			Для Каждого Тип Из маТипы Цикл
				
				МетаданныеЭлемента = Неопределено;
				Если
					Справочники.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
					ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
						МетаданныеЭлемента = ОписаниеТиповПоТипу(Тип).ПривестиЗначение(Неопределено).Метаданные();
				КонецЕсли;
				
				Если МетаданныеЭлемента <> Неопределено Тогда
					
					маКоллекцииРеквизитов = Новый Массив;
					маКоллекцииРеквизитов.Добавить(МетаданныеЭлемента.СтандартныеРеквизиты);
					маКоллекцииРеквизитов.Добавить(МетаданныеЭлемента.Реквизиты);
					
					Для Каждого КоллекцияРеквизитов Из маКоллекцииРеквизитов Цикл
						Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
							
							К = соСчетчики[Реквизит.Имя];
							К = ?(К = Неопределено, 0, К);
							соСчетчики[Реквизит.Имя] = К + 1;
							
							Типы = соТипы[Реквизит.Имя];
							Если Типы = Неопределено Тогда
								Типы = Новый Массив;
							КонецЕсли;
							
							Для Каждого Тип Из Реквизит.Тип.Типы() Цикл
								Типы.Добавить(Тип);
							КонецЦикла;
							
							соТипы[Реквизит.Имя] = Типы;
							
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого кз Из соСчетчики Цикл
				
				Если кз.Значение = маТипы.Количество() Тогда//Добавляем только те реквизиты, которые есть во всех типах составного типа.
					
					стрИмя = кз.Ключ;
					маТипы = соТипы[стрИмя];
					НовыйЭлементСтруктуры = ЭлементСтруктуры.ПолучитьЭлементы().Добавить();
					НовыйЭлементСтруктуры.Имя = стрИмя;
					НовыйЭлементСтруктуры.Тип = Новый ОписаниеТипов(маТипы);
					
					НовыйЭлементСтруктуры.Картинка = Обработка.ПолучитьКартинкуПоТипу(НовыйЭлементСтруктуры.Тип, Картинки);

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ПодчиненныеУзлыРаскрыты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаписиРезультата_Развернуть()
	ЭлементыДерева = СтруктураЗаписиРезультата.ПолучитьЭлементы();
	Элементы.СтруктураЗаписиРезультата.Развернуть(ЭлементыДерева[0].ПолучитьИдентификатор());
	Элементы.СтруктураЗаписиРезультата.Развернуть(ЭлементыДерева[1].ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
//Заполняет структуру записи, используемую на странице выполнения кода.
Процедура СтруктураЗаписиРезультата_ЗаполнитьСтруктуруЗаписи(рзВыборка = Неопределено)
	Перем Картинки;
	
	СтруктураЗаписиРезультата.ПолучитьЭлементы().Очистить();
	
	Если рзВыборка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	//Свойства в выборке раскрывать не нужно. Все необходимое нужно выбирать в запросе.
	фРаскрыватьСвойстваВВыборке = Ложь;
	
	//А в параметрах раскроем, это не так страшно.
	фРаскрыватьСвойстваВПараметрах = Истина;
	
	ЭлементСтруктурыВыборка = СтруктураЗаписиРезультата.ПолучитьЭлементы().Добавить();
	ЭлементСтруктурыВыборка.Имя = "Выборка";
	ЭлементСтруктурыВыборка.ПодчиненныеУзлыРаскрыты = НЕ фРаскрыватьСвойстваВВыборке;
	
	Для Каждого Колонка Из рзВыборка.Колонки Цикл
		ЭлементСтруктуры = ЭлементСтруктурыВыборка.ПолучитьЭлементы().Добавить();
		ЭлементСтруктуры.Имя = Колонка.Имя;
		ЭлементСтруктуры.Тип = Колонка.ТипЗначения;
		ЭлементСтруктуры.Картинка = Обработка.ПолучитьКартинкуПоТипу(Обработка.ТипБезПустых(Колонка.ТипЗначения), Картинки);
		ЭлементСтруктуры.ПодчиненныеУзлыРаскрыты = НЕ фРаскрыватьСвойстваВВыборке;
	КонецЦикла;
	
	ЭлементСтруктурыПараметры = СтруктураЗаписиРезультата.ПолучитьЭлементы().Добавить();
	ЭлементСтруктурыПараметры.Имя = "Параметры";
	ЭлементСтруктурыПараметры.ПодчиненныеУзлыРаскрыты = НЕ фРаскрыватьСвойстваВПараметрах;
	
	Для Каждого СтрокаПараметра Из ПараметрыЗапроса Цикл
		
		ЭлементСтруктуры = ЭлементСтруктурыПараметры.ПолучитьЭлементы().Добавить();
		ЭлементСтруктуры.Имя = СтрокаПараметра.Имя;
		
		Если СтрокаПараметра.ТипКонтейнера = 1 Тогда
			ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
		ИначеЕсли СтрокаПараметра.ТипКонтейнера = 2 Тогда
			ТипЗначения = Новый ОписаниеТипов("Массив");
		Иначе
			ТипЗначения = СтрокаПараметра.ТипЗначения;
		КонецЕсли;
		
		ЭлементСтруктуры.Тип = ТипЗначения;
		ЭлементСтруктуры.Картинка = Обработка.ПолучитьКартинкуПоТипу(Обработка.ТипБезПустых(ТипЗначения), Картинки);
		ЭлементСтруктуры.ПодчиненныеУзлыРаскрыты = НЕ фРаскрыватьСвойстваВПараметрах;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьРезультат(чРезультат = Неопределено)
	
	Если чРезультат = РезультатНаФорме Тогда
		Возврат 0;
	КонецЕсли;
	
	Если чРезультат <> Неопределено Тогда
		РезультатНаФорме = чРезультат;
	КонецЕсли;
	
	КоличествоЗаписейРезультата = ИзвлечьРезультатВДанныеФормы(РезультатНаФорме);
	
	РезультатВПакете = РезультатНаФорме;
	
	Элементы.ПакетРезультатаЗапроса.ТекущаяСтрока = ПакетРезультатаЗапроса[РезультатНаФорме - 1].ПолучитьИдентификатор();
	
	Возврат КоличествоЗаписейРезультата;
	
КонецФункции

&НаСервере
Функция ИзвлечьРезультатВДанныеФормы(РезультатВПакете)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	фДерево = ВидРезультата = "дерево";
	Если фДерево Тогда
		стрИмяРеквизитаРезультата = "РезультатЗапросаДерево";
	Иначе
		стрИмяРеквизитаРезультата = "РезультатЗапроса";
	КонецЕсли;
	
	Элементы.КоманднаяПанельЛево.Доступность = Истина;
	Элементы.РезультатЗапроса.Видимость = НЕ фДерево;
	Элементы.КоманднаяПанельРезультата.Видимость = НЕ фДерево;
	Элементы.КоманднаяПанельРезультата.Доступность = НЕ фДерево;
	Элементы.РезультатЗапросаДерево.Видимость = фДерево;
	Элементы.КоманднаяПанельРезультатаДерево.Видимость = фДерево;
	Элементы.КоманднаяПанельРезультатаДеревоЛево.Видимость = фДерево;
	
	Если НЕ ЗначениеЗаполнено(АдресРезультатаЗапроса) Тогда
		СтруктураЗаписиРезультата_ЗаполнитьСтруктуруЗаписи();
		Возврат 0;
	КонецЕсли;
	
	Если Число(РезультатВПакете) <= 0 Тогда
		РеквизитФормыВЗначение("Объект").СоздатьРеквизитыТаблицыПоКолонкам(ЭтаФорма, "РезультатЗапроса", Неопределено);
		СтруктураЗаписиРезультата_ЗаполнитьСтруктуруЗаписи();
		Возврат 0;
	КонецЕсли;
	
	Элементы.ГруппаУправлениеРезультатомЗапроса.Доступность = Истина;
	
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	маРезультатЗапроса = стРезультатЗапроса.Результат;
	стРезультат = маРезультатЗапроса[Число(РезультатВПакете) - 1];
	рзВыборка = стРезультат.Результат;
	стМакроколонки = стРезультат.Макроколонки;
	фЕстьМакроколонки = стМакроколонки.Количество() > 0;
	
	РезультатЗапроса.Очистить();
	РезультатЗапросаДерево.ПолучитьЭлементы().Очистить();
	Обработка.СоздатьРеквизитыТаблицыПоКолонкам(ЭтаФорма, стрИмяРеквизитаРезультата, "РезультатЗапросаСоответствиеКолонок", "РезультатЗапросаКолонкиКонтейнера", ?(рзВыборка = Неопределено, Неопределено, рзВыборка.Колонки), Ложь, стМакроколонки);
	
	Если рзВыборка = Неопределено Тогда
		СтруктураЗаписиРезультата_ЗаполнитьСтруктуруЗаписи();
		Возврат 0;
	КонецЕсли;

	маСписокКолонок = Новый Массив;
	Для Каждого кзКолонка Из РезультатЗапросаСоответствиеКолонок Цикл
		маСписокКолонок.Добавить(кзКолонка.Значение);
	КонецЦикла;
	стрСписокКолонок = СтрСоединить(маСписокКолонок, ",");

	фЕстьКонтейнеры = РезультатЗапросаКолонкиКонтейнера.Количество() > 0;
	Если НЕ фЕстьМакроколонки И НЕ фЕстьКонтейнеры И (НЕ ОграничениеВыводимыхСтрокВкл ИЛИ ОграничениеВыводимыхСтрок = 0) Тогда
		
		Если фДерево Тогда
			
			тзРезультат = рзВыборка.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗначениеВДанныеФормы(тзРезультат, РезультатЗапросаДерево);
			КоличествоВозвращенныхСтрокРезультата = рзВыборка.Выбрать().КОличество();
			
		Иначе
			
			тзРезультат = рзВыборка.Выгрузить();
			ЗначениеВДанныеФормы(тзРезультат, РезультатЗапроса);
			
			КоличествоВозвращенныхСтрокРезультата = тзРезультат.Количество();
			
			Если тзРезультат.Количество() > 0 Тогда
				тзРезультат.Свернуть("", стрСписокКолонок); 
				ЗаполнитьЗначенияСвойств(РезультатЗапросаИтоги[0], тзРезультат[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если фДерево Тогда
			
			выбЗапрос = рзВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			й = 0;
			ВыборкуВДерево(выбЗапрос, РезультатЗапросаДерево, й, фЕстьКонтейнеры, Обработка, фЕстьМакроколонки, стМакроколонки);

			КоличествоВозвращенныхСтрокРезультата = выбЗапрос.Количество();
			
		Иначе
			
			й = 0;
			выбЗапрос = рзВыборка.Выбрать();
			Пока выбЗапрос.Следующий() Цикл
				
				й = й + 1;
				
				Если ОграничениеВыводимыхСтрокВкл И ОграничениеВыводимыхСтрок > 0 И й > ОграничениеВыводимыхСтрок Тогда
					Прервать;
				КонецЕсли;
				
				РезультатЗапросаСтрока = РезультатЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(РезультатЗапросаСтрока, выбЗапрос);
				Если фЕстьКонтейнеры Тогда
					Обработка.ДобавитьКонтейнеры(РезультатЗапросаСтрока, выбЗапрос, РезультатЗапросаКолонкиКонтейнера);
				КонецЕсли;
				
				Если фЕстьМакроколонки Тогда
					Обработка.ОбработатьМакроколонки(РезультатЗапросаСтрока, выбЗапрос, стМакроколонки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОграничениеВыводимыхСтрокВкл И ОграничениеВыводимыхСтрок > 0 Тогда
				тзРезультат = ДанныеФормыВЗначение(РезультатЗапроса, Тип("ТаблицаЗначений"));
			Иначе
				тзРезультат = рзВыборка.Выгрузить();
			КонецЕсли;
			
			Если тзРезультат.Количество() > 0 Тогда
				тзРезультат.Свернуть("", стрСписокКолонок); 
				ЗаполнитьЗначенияСвойств(РезультатЗапросаИтоги[0], тзРезультат[0]);
			КонецЕсли;
			
			КоличествоВозвращенныхСтрокРезультата = рзВыборка.Выбрать().Количество();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаписиРезультата_ЗаполнитьСтруктуруЗаписи(рзВыборка);
	
	Возврат КоличествоВозвращенныхСтрокРезультата;
	
КонецФункции

#Область СохраняемыеСостояния

//Сохраняемые состояния - структура, предназначена для сохранения значений, которых нет в опциях (состояния флажков форм,
//разных значений, и т.д.). Записывается в файл. Из файла читается только при первом открытии.
//Это дублирование кода из модуля обработки, но если нужно получать и с сервера, и с клиента, 1С по другому не умеет. Лишний вызов сервера не нужен.

Процедура СохраняемыеСостояния_Сохранить(ИмяЗначения, Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.СохраняемыеСостояния) Тогда
		Объект.СохраняемыеСостояния = Новый Структура;
	КонецЕсли;
	
	Объект.СохраняемыеСостояния.Вставить(ИмяЗначения, Значение);
	
КонецПроцедуры

Функция СохраняемыеСостояния_Получить(ИмяЗначения, ЗначениеПоУмолчанию) Экспорт
	Перем Значение;
	
	Если НЕ ЗначениеЗаполнено(Объект.СохраняемыеСостояния) ИЛИ НЕ Объект.СохраняемыеСостояния.Свойство(ИмяЗначения, Значение) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапроса

&НаСервере
Функция РазобратьВыражениеМакроКолонки(стрМакроВыражение)
	
	стМакроколонка = Неопределено;
	
	маЪ = СтрРазделить(стрМакроВыражение, "_");
	Если маЪ.Количество() > 1 Тогда
		
		стрТипМакро = маЪ[0];
		стрКолонкаИсточника = Прав(стрМакроВыражение, СтрДлина(стрМакроВыражение) - СтрДлина(стрТипМакро) - 1);
		
		ТипЗначения = Неопределено;
		Если стрТипМакро = "УИД" Тогда
			ТипЗначения = Новый ОписаниеТипов("УникальныйИдентификатор");
		КонецЕсли;
		
		Если ТипЗначения <> Неопределено Тогда
			стМакроколонка = Новый Структура("Тип, ТипЗначения, КолонкаИсточника", стрТипМакро, ТипЗначения, стрКолонкаИсточника);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат стМакроколонка;
	
КонецФункции
	
&НаСервере
Функция ПолучитьМакроколонки(ЗапросСхемы)
	
	стМакроколонки = Новый Структура;
	Если НЕ Объект.ОпцияОбрабатывать__ Тогда
		Возврат стМакроколонки;
	КонецЕсли;
	
	стрНачалоМакро = "&" + МакроПараметр;
	Для Каждого Колонка Из ЗапросСхемы.Колонки Цикл
		
		Если Колонка.Поля.Количество() > 0 Тогда
			
			стрВыражение = Колонка.Поля[0];
			Если СтрНачинаетсяС(стрВыражение, стрНачалоМакро) Тогда
				
				стрМакроВыражение = Прав(стрВыражение, СтрДлина(стрВыражение) - СтрДлина(стрНачалоМакро));
				стМакроколонка = РазобратьВыражениеМакроКолонки(стрМакроВыражение);
				Если стМакроколонка <> Неопределено Тогда
					стМакроколонки.Вставить(Колонка.Псевдоним, стМакроколонка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат стМакроколонки;
	
КонецФункции

&НаСервере
//Выполняет запрос по схеме, извлекая информацию о каждом подзапросе пакета (тип подзапроса, имена временных таблиц, количество строк результата, и т.д.
Функция ВыполнитьПакет(зЗапрос, СхемаЗапроса)
	
	маРезультат = Новый Массив;
	Для Каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			зЗапрос.Текст = ЗапросСхемы.ПолучитьТекстЗапроса();
			стМакроколонки = ПолучитьМакроколонки(ЗапросСхемы);
			ВремяНачалаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
			рзРезультат = зЗапрос.Выполнить();
			ДлительностьВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаЗапроса;
			
			Если ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
				
				чКоличествоЗаписей = Неопределено;
				выбРезультат = рзРезультат.Выбрать();
				Если выбРезультат.Следующий() Тогда
					чКоличествоЗаписей = выбРезультат.Количество;
				КонецЕсли;

				зЗапрос.Текст = "ВЫБРАТЬ * ИЗ " + ЗапросСхемы.ТаблицаДляПомещения;
				рзРезультатТаблицы = зЗапрос.Выполнить();
				стРезультат = Новый Структура("Результат, ИмяТаблицы, ИмяРезультата, КоличествоЗаписей, Макроколонки, ДлительностьВМиллисекундах, СозданиеВременнойТаблицы",
					рзРезультатТаблицы, ЗапросСхемы.ТаблицаДляПомещения, ЗапросСхемы.ТаблицаДляПомещения, чКоличествоЗаписей, стМакроколонки, ДлительностьВМиллисекундах, Истина);
				маРезультат.Добавить(стРезультат);
				
			Иначе
				
				стРезультат = Новый Структура("Результат, ИмяТаблицы, ИмяРезультата, КоличествоЗаписей, Макроколонки, ДлительностьВМиллисекундах, СозданиеВременнойТаблицы",
					рзРезультат, , "Результат" + СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемы), рзРезультат.Выбрать().Количество(), стМакроколонки, ДлительностьВМиллисекундах, Ложь);
				маРезультат.Добавить(стРезультат);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗапросСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			зЗапрос.Текст = "УНИЧТОЖИТЬ " + ЗапросСхемы.ИмяТаблицы;
			зЗапрос.Выполнить();
		Иначе
			Возврат "Неизвестный тип запроса схемы";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат маРезультат;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыМакроколонокЗапроса(зЗапрос)
	
	Если Объект.ОпцияОбрабатывать__ Тогда
		
		КоллекцияПараметров = зЗапрос.НайтиПараметры();
		Для Каждого ПараметрЗапроса Из КоллекцияПараметров Цикл
			
			Если СтрНачинаетсяС(ПараметрЗапроса.Имя, МакроПараметр) Тогда
				зЗапрос.УстановитьПараметр(ПараметрЗапроса.Имя, Null);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросНаСервере(стрТекстЗапроса)
	Перем чСтрока, чКолонка;
	
	зЗапрос = Новый Запрос;
	зЗапрос.МенеджерВременныхТаблиц = ЗагрузитьВременныеТаблицы();
			
	Для Каждого СтрокаПараметра Из ПараметрыЗапроса Цикл
		
		Если Объект.ОпцияОбрабатывать__ И СтрНачинаетсяС(СтрокаПараметра.Имя, МакроПараметр) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = ПараметрыЗапроса_ПолучитьЗначение(СтрокаПараметра.ПолучитьИдентификатор());
		зЗапрос.УстановитьПараметр(СтрокаПараметра.Имя, Значение);
		
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	Попытка
		зЗапрос.Текст = стрТекстЗапроса;
		УстановитьПараметрыМакроколонокЗапроса(зЗапрос);
		СхемаЗапроса.УстановитьТекстЗапроса(стрТекстЗапроса);
	Исключение
		стрОшибка = ОписаниеОшибки();
		РазобратьОшибкуЗапросаСУточнением(стрОшибка, зЗапрос, стрТекстЗапроса, чСтрока, чКолонка);
		Возврат Новый Структура("ОписаниеОшибки, Строка, Колонка, ВремяНачала, ВремяОкончания", стрОшибка, чСтрока, чКолонка);
	КонецПопытки;
		
	Если ОграничениеВыводимыхСтрокПервыеВкл И ОграничениеВыводимыхСтрокПервые > 0 Тогда
		
		Для Каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
			Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") И НЕ ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
				Для Каждого Оператор Из ЗапросСхемы.Операторы Цикл
					Если НЕ ЗначениеЗаполнено(Оператор.КоличествоПолучаемыхЗаписей) Тогда
						Оператор.КоличествоПолучаемыхЗаписей = ОграничениеВыводимыхСтрокПервые;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		маРезультатЗапроса = ВыполнитьПакет(зЗапрос, СхемаЗапроса);
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ТипЗнч(маРезультатЗапроса) <> Тип("Массив") Тогда
			ВызватьИсключение маРезультатЗапроса;
		КонецЕсли;
	Исключение
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		зЗапрос.МенеджерВременныхТаблиц = ЗагрузитьВременныеТаблицы();
		стрОшибка = ОписаниеОшибки();
		РазобратьОшибкуЗапросаСУточнением(стрОшибка, зЗапрос, стрТекстЗапроса, чСтрока, чКолонка);
		Возврат Новый Структура("ОписаниеОшибки, Строка, Колонка, ВремяНачала, ВремяОкончания", стрОшибка, чСтрока, чКолонка, ВремяНачала, ВремяОкончания);
	КонецПопытки;
	
	стРезультат = Новый Структура("Результат, Параметры", маРезультатЗапроса, зЗапрос.Параметры);
	Если ЗначениеЗаполнено(АдресРезультатаЗапроса) Тогда
		АдресРезультатаЗапроса = ПоместитьВоВременноеХранилище(стРезультат, АдресРезультатаЗапроса);
	Иначе
		АдресРезультатаЗапроса = ПоместитьВоВременноеХранилище(стРезультат, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.РезультатВПакете.СписокВыбора.Очистить();
	ПакетРезультатаЗапроса.Очистить();
	Для й = 1 По маРезультатЗапроса.Количество() Цикл
		
		стРезультат = маРезультатЗапроса[й - 1];
		Элементы.РезультатВПакете.СписокВыбора.Добавить(Строка(й), стРезультат.ИмяРезультата + " (" + стРезультат.КоличествоЗаписей + ")");
		
		СтрокаПакета = ПакетРезультатаЗапроса.Добавить();
		СтрокаПакета.Имя = стРезультат.ИмяРезультата;
		СтрокаПакета.ТипРезультата = ?(стРезультат.СозданиеВременнойТаблицы, 0, 1);
		СтрокаПакета.Инфо = СтрШаблон("%1 / %2", стРезультат.КоличествоЗаписей, ФорматироватьДлительность(стРезультат.ДлительностьВМиллисекундах));
		
	КонецЦикла;
	
	Возврат Новый Структура("ОписаниеОшибки, Строка, Колонка, ВремяНачала, ВремяОкончания, КоличествоРезультатов"
											, , , , ВремяНачала, ВремяОкончания, маРезультатЗапроса.Количество());
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПереместитьСтрокуДерева(Дерево, ПеремещаемаяСтрока, ИндексВставки, НовыйРодитель, Уровень = 0)
   
   Если Уровень = 0 Тогда
	   
	Если НовыйРодитель = Неопределено Тогда
		НоваяСтрока = Дерево.ПолучитьЭлементы().Вставить(ИндексВставки);
	Иначе
		НоваяСтрока = НовыйРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	ПереместитьСтрокуДерева(Дерево, ПеремещаемаяСтрока, ИндексВставки, НоваяСтрока, Уровень + 1);

	ПеремещаемаяСтрокаРодитель = ПеремещаемаяСтрока.ПолучитьРодителя();
	Если ПеремещаемаяСтрокаРодитель = Неопределено Тогда
	   Дерево.ПолучитьЭлементы().Удалить(ПеремещаемаяСтрока);
	Иначе
	   ПеремещаемаяСтрокаРодитель.ПолучитьЭлементы().Удалить(ПеремещаемаяСтрока);
	КонецЕсли;
       
   Иначе
       
       Для Каждого Строка ИЗ ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
           НоваяСтрока = НовыйРодитель.ПолучитьЭлементы().Добавить();
           ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
           ПереместитьСтрокуДерева(Дерево, Строка, НоваяСтрока, ИндексВставки, Уровень + 1); 
       КонецЦикла;
       
   КонецЕсли;
   
   Возврат НоваяСтрока;
       
КонецФункции

&НаКлиенте
Процедура ОшибкаКонсоли(стрОшибка)
	ВызватьИсключение стрОшибка;
КонецПроцедуры

&НаКлиенте
Функция УстановитьИмяФайлаЗапросов(стрПолноеИмя = "")
	
	ИмяФайлаЗапросов = стрПолноеИмя;
	Если ЗначениеЗаполнено(ИмяФайлаЗапросов) Тогда
		Файл = Новый Файл(стрПолноеИмя);
		ПакетЗапросов_ИмяДляОтображения = Файл.Имя;
		ПакетЗапросов_ИмяДляПодсказки = Файл.ПолноеИмя;
	Иначе
		ПакетЗапросов_ИмяДляОтображения = "Имя";
		ПакетЗапросов_ИмяДляПодсказки = "Имя";
	КонецЕсли;
	
	Элементы.ПакетЗапросов.ПодчиненныеЭлементы.СписокЗапросовЗапрос.Заголовок = ПакетЗапросов_ИмяДляОтображения;
	Элементы.ПакетЗапросов.ПодчиненныеЭлементы.СписокЗапросовЗапрос.Подсказка = ПакетЗапросов_ИмяДляПодсказки;
	
КонецФункции

&НаКлиенте
Функция СохранитьСВопросом(ДополнительныеПараметры)
	
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПослеВопросаСохранения", ЭтаФорма, ДополнительныеПараметры),
			"Имеется не сохраненный пакет запросов. Сохранить?",
			РежимДиалогаВопрос.ДаНетОтмена,
			,
			КодВозвратаДиалога.Да);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПослеВопроса(РезультатВопроса, ДополнительныеПараметры)
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПакетЗапросов(Новый Структура("Завершение", Истина));
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Если ЗначениеЗаполнено(ИмяФайлаЗапросов) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПослеУдаления", ЭтаФорма);
			НачатьУдалениеФайлов(ОписаниеОповещения, ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов));
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПослеУдаления", ЭтаФорма);
			НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайлаАвтосохраненияСостояния);
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПослеУдаления(ДополнительныеПараметры) Экспорт
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Автосохранить()

	ПоместитьРедактируемыйЗапрос();
	
	Если ЗначениеЗаполнено(ИмяФайлаЗапросов) Тогда
		ПакетЗапросов_Сохранить(ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов));
		ПакетЗапросов_Сохранить(ИмяФайлаАвтосохраненияСостояния, Истина);
	Иначе
		ПакетЗапросов_Сохранить(ИмяФайлаАвтосохраненияСостояния);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗапросаВСписокЗначений(ПараметрыДанныеФормыКоллекция)
	
	сзПараметрыЗапроса = Новый СписокЗначений;
	Для Каждого СтрокаПараметра Из ПараметрыДанныеФормыКоллекция Цикл
		стПараметр = Новый Структура("Имя, ТипЗначения, Значение, ТипКонтейнера, Контейнер");
		ЗаполнитьЗначенияСвойств(стПараметр, СтрокаПараметра);
		сзПараметрыЗапроса.Добавить(стПараметр);
	КонецЦикла;
	
	Возврат сзПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Функция ВременныеТаблицыВСписокЗначений(ВременныеТаблицыДанныеФормыКоллекция)
	
	сзВременныеТаблицы = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ВременныеТаблицыДанныеФормыКоллекция Цикл
		стТаблица = Новый Структура("Имя, Контейнер, Значение");
		ЗаполнитьЗначенияСвойств(стТаблица, СтрокаТаблицы);
		сзВременныеТаблицы.Добавить(стТаблица);
	КонецЦикла;
	
	Возврат сзВременныеТаблицы;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыЗапросаИзСпискаЗначений(сзПараметры, ПараметрыДанныеФормыКоллекция)
	
	ПараметрыДанныеФормыКоллекция.Очистить();
	
	Если сзПараметры <> Неопределено Тогда
		
		Для Каждого кзПараметр Из сзПараметры Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыДанныеФормыКоллекция.Добавить(), кзПараметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВременныеТаблицыИзСпискаЗначений(сзВременныеТаблицы, ВременныеТаблицыДанныеФормыКоллекция)
	
	ВременныеТаблицыДанныеФормыКоллекция.Очистить();
	
	Если сзВременныеТаблицы <> Неопределено Тогда
		
		Для Каждого кзТаблица Из сзВременныеТаблицы Цикл
			ЗаполнитьЗначенияСвойств(ВременныеТаблицыДанныеФормыКоллекция.Добавить(), кзТаблица.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЭлементовФормыАлгоритма()
	
	//Если ФоновоеЗаданиеИдентификатор заполнен - то происходит выполнение кода в фоновом задании.
	//В этом случае управление элементами происходит в процедурах отображения прогресса.
	Если НЕ ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		Если Элементы.ПакетЗапросов.ТекущиеДанные <> Неопределено И ИмяЗапросаРезультата = Элементы.ПакетЗапросов.ТекущиеДанные.Имя Тогда
			Элементы.ВыполнитьОбработку.Доступность = Истина;
			СостояниеВыполнения = "";
			Элементы.СтруктураЗаписиРезультата.Доступность = Истина;
		Иначе
			Элементы.ВыполнитьОбработку.Доступность = Ложь;
			СостояниеВыполнения = "(запрос не выполнен)";
			Элементы.СтруктураЗаписиРезультата.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыЗапроса

//Работа с параметром запроса, хранимым в виде строки таблицы ПараметрыЗапроса. Далее везде параметр с именем "СтрокаИд" - это идентификатор строка этой таблицы.

&НаСервере
Функция ПараметрыЗапроса_ПолучитьЗначение(СтрокаИд)
	
	СтрокаПараметр = ПараметрыЗапроса.НайтиПоИдентификатору(СтрокаИд);
	
	Если СтрокаПараметр.ТипКонтейнера = 0 ИЛИ СтрокаПараметр.ТипКонтейнера = 1 ИЛИ СтрокаПараметр.ТипКонтейнера = 2 ИЛИ СтрокаПараметр.ТипКонтейнера = 3 Тогда
		Возврат РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(СтрокаПараметр.Контейнер);
	Иначе
		ВызватьИсключение "Ошибка в типе контейнера параметра";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапроса_СохранитьЗначение(СтрокаИд, Знач Значение)
	
	СтрокаПараметр = ПараметрыЗапроса.НайтиПоИдентификатору(СтрокаИд);
	
	Если СтрокаПараметр.ТипКонтейнера = 0 Тогда
		СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Значение);
		Если ТипЗнч(СтрокаПараметр.Контейнер) = Тип("Структура") Тогда
			СтрокаПараметр.Значение = СтрокаПараметр.Контейнер.Представление;
		Иначе
			СтрокаПараметр.Значение = Значение;
		КонецЕсли;
	ИначеЕсли СтрокаПараметр.ТипКонтейнера = 1 Тогда
		СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Значение);
		СтрокаПараметр.Значение = СтрокаПараметр.Контейнер.Представление;
	ИначеЕсли СтрокаПараметр.ТипКонтейнера = 2 Тогда
		СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Значение);
		СтрокаПараметр.Значение = СтрокаПараметр.Контейнер.Представление;
	ИначеЕсли СтрокаПараметр.ТипКонтейнера = 3 Тогда
		СтрокаПараметр.ТипЗначения = "Таблица значений";
		СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Значение);
		СтрокаПараметр.Значение = СтрокаПараметр.Контейнер.Представление;
	Иначе
		ВызватьИсключение "Ошибка в типе контейнера параметра";
	КонецЕсли;
	
	Модифицированность = Истина;
		
КонецФункции

&НаСервере
//Контейнер типа 1 и типа 2 (список значений или массив) возвращаем в виде массива
Функция Контейнер12ВМассив(Контейнер)
	
	Значение = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(Контейнер);
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат Значение.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПараметрыЗапроса_УстановитьТип(СтрокаИд, ТипКонтейнера, ТипЗначения)

	СтрокаПараметр = ПараметрыЗапроса.НайтиПоИдентификатору(СтрокаИд);
	Контейнер = СтрокаПараметр.Контейнер;
	
	Если ТипКонтейнера = 1 ИЛИ ТипКонтейнера = 2 Тогда
		
		Если СтрокаПараметр.ТипКонтейнера = 1 ИЛИ СтрокаПараметр.ТипКонтейнера = 2 Тогда
			КонтейнерМассив = Контейнер12ВМассив(Контейнер);
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 3 Тогда
			//Была ТЗ, теперь СЗ. Надо достать первую ячейку.
			Таблица = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(Контейнер);
			КонтейнерМассив = Таблица.ВыгрузитьКолонку(0);
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 0 Тогда
			КонтейнерМассив = Новый Массив;
			Если ЗначениеЗаполнено(СтрокаПараметр.Значение) Тогда
				КонтейнерМассив.Добавить(СтрокаПараметр.Значение);
			КонецЕсли;
			СтрокаПараметр.Значение = Неопределено;
		КонецЕсли;
		
		Если ТипКонтейнера = 1 Тогда
			НовыйСписок = Новый СписокЗначений;
			НовыйСписок.ЗагрузитьЗначения(КонтейнерМассив);
			НовыйСписок.ТипЗначения = ТипЗначения;
			СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(НовыйСписок);
		ИначеЕсли ТипКонтейнера = 2 Тогда
			СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(КонтейнерМассив);
		КонецЕсли;
		
	ИначеЕсли ТипКонтейнера = 3 Тогда
		
		Если СтрокаПараметр.ТипКонтейнера = 1 ИЛИ СтрокаПараметр.ТипКонтейнера = 2 Тогда
			Таблица = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(ТипЗначения);
			Значение = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(Контейнер);
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				Значение = Значение.ВыгрузитьЗначения();
			КонецЕсли;
			Для Каждого ъ Из Значение Цикл
				Таблица.Добавить()[0] = ъ;
			КонецЦикла;
			НовыйКонтейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Таблица);
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 3 Тогда
			Контейнер = ТипЗначения;
			//Теперь не копируем, преобразование уже выполняет редактор типа!
			//СкопироватьДанныеКонтейнераТипа3(Контейнер, СтрокаПараметр.Контейнер);
			НовыйКонтейнер = Контейнер;
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 0 Тогда
			Таблица = РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(ТипЗначения);
			Таблица.Добавить()[0] = СтрокаПараметр.Значение;
			НовыйКонтейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(Таблица);
		КонецЕсли;
		
		СтрокаПараметр.Контейнер = НовыйКонтейнер;
	
	ИначеЕсли ТипКонтейнера = 0 Тогда
		
		Если СтрокаПараметр.ТипКонтейнера = 1 ИЛИ СтрокаПараметр.ТипКонтейнера = 2 Тогда
			КонтейнерМассив = Контейнер12ВМассив(Контейнер);
		    Если КонтейнерМассив.Количество() > 0 Тогда
				СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(ТипЗначения.ПривестиЗначение(КонтейнерМассив[0]));
			КонецЕсли;
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 3 Тогда
			сз = ПараметрыЗапросаФормаПриИзмененииСЗИзТЗ(Контейнер);
		    Если сз.Количество() > 0 Тогда
				СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(ТипЗначения.ПривестиЗначение(сз.СписокЗначений[0].Значение));
			КонецЕсли;
		ИначеЕсли СтрокаПараметр.ТипКонтейнера = 0 Тогда
			СтрокаПараметр.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(ТипЗначения.ПривестиЗначение(РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(СтрокаПараметр.Контейнер)));
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПараметр.ТипКонтейнера = ТипКонтейнера;
	Если СтрокаПараметр.ТипКонтейнера = 3 Тогда
		СтрокаПараметр.ТипЗначения = "Таблица значений";
	Иначе
		СтрокаПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;

	Модифицированность = Истина;
	
	Если ТипЗнч(СтрокаПараметр.Контейнер) = Тип("Структура") Тогда
		СтрокаПараметр.Значение = СтрокаПараметр.Контейнер.Представление;
	Иначе
		СтрокаПараметр.Значение = СтрокаПараметр.Контейнер;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКонтейнераТипа3(КонтейнерНовый, КонтейнерСтарый)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ТаблицаНовая = Обработка.СтрокаВЗначение(КонтейнерНовый.Значение);
	ТаблицаСтарая = Обработка.СтрокаВЗначение(КонтейнерСтарый.Значение);
	
	ТаблицаНовая.Очистить();
	
	//Если одинаковых колонок нет, то копировать нечего.
	фОдинаковыеЕсть = Ложь;
	Для Каждого КолонкаНовая Из ТаблицаНовая.Колонки Цикл
		Если ТаблицаСтарая.Колонки.Найти(КолонкаНовая.Имя) <> Неопределено Тогда
			фОдинаковыеЕсть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если фОдинаковыеЕсть Тогда
		Для Каждого СтрокаСтарая Из ТаблицаСтарая Цикл
			СтрокаНовая = ТаблицаНовая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаСтарая);
		КонецЦикла;
		КонтейнерНовый.КоличествоСтрок = КонтейнерСтарый.КоличествоСтрок;
	Иначе
		КонтейнерНовый.КоличествоСтрок = 0;
	КонецЕсли;
	
	КонтейнерНовый.Значение = Обработка.ЗначениеВСтроку(ТаблицаНовая);
	КонтейнерНовый.Представление = Обработка.Контейнер_ПолучитьПредставление(КонтейнерНовый);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапроса_ПолучитьКакСтроку()
	
	тзПараметры = Новый ТаблицаЗначений;
	тзПараметры.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	тзПараметры.Колонки.Добавить("Значение");
	Для Каждого СтрокаПараметра Из ПараметрыЗапроса Цикл
		СтрокаТаблицы = тзПараметры.Добавить();
		СтрокаТаблицы.Имя = СтрокаПараметра.Имя;
		СтрокаТаблицы.Значение = ПараметрыЗапроса_ПолучитьЗначение(СтрокаПараметра.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат РеквизитФормыВЗначение("Объект").ЗначениеВСтроку(тзПараметры);
		
КонецФункции

#КонецОбласти //ПараметрыЗапроса

#Область ПакетЗапросов

&НаКлиенте
Процедура ИнициализироватьЗапрос(ТекущаяСтрока)
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Имя) Тогда
		КоличествоЗапросов = КоличествоЗапросов + 1;
		ТекущаяСтрока.Имя = "Запрос" + КоличествоЗапросов;
		ТекущаяСтрока.Инициализирован = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьРедактируемыйЗапрос()
	
	Если РедактируемыйЗапрос >= 0 Тогда
		стрТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
		стрТекстАлгоритм = ТекстАлгоритм.ПолучитьТекст();
		Запрос_ПоместитьДанныеЗапроса(РедактируемыйЗапрос, стрТекстЗапроса, стрТекстАлгоритм, МетодИсполненияКода, ПараметрыЗапросаВСписокЗначений(ПараметрыЗапроса), ВременныеТаблицыВСписокЗначений(ВременныеТаблицы));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьРедактируемыйЗапрос(ЗапросКроме = Неопределено)
	
	Если РедактируемыйЗапрос <> ЗапросКроме Тогда
		ПоместитьРедактируемыйЗапрос();
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ПакетЗапросов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстЗапроса.Очистить();
		ТекстАлгоритм.Очистить();
		Элементы.ТекстЗапроса.ТолькоПросмотр = Истина;
		Элементы.ГруппаЗапросСтраницы.ПодчиненныеЭлементы.СтраницаЗапрос.Заголовок = "Запрос";
		ПараметрыЗапроса.Очистить();
		ВременныеТаблицы.Очистить();
		Возврат;
	КонецЕсли;
	
	стДанныеЗапроса = Запрос_ПолучитьДанныеЗапроса(ТекущаяСтрока);
	ТекстЗапроса.УстановитьТекст(стДанныеЗапроса.Запрос);
	ТекстАлгоритм.УстановитьТекст(стДанныеЗапроса.ТекстКод);
	МетодИсполненияКода = стДанныеЗапроса.МетодИсполненияКода;
	
	ПараметрыЗапросаИзСпискаЗначений(стДанныеЗапроса.Параметры, ПараметрыЗапроса);
	ВременныеТаблицыИзСпискаЗначений(стДанныеЗапроса.ВременныеТаблицы, ВременныеТаблицы);
	
	Если стДанныеЗапроса.ВКонструкторе Тогда
		Элементы.ТекстЗапроса.ТолькоПросмотр = Истина;
		Элементы.ГруппаЗапросСтраницы.ПодчиненныеЭлементы.СтраницаЗапрос.Заголовок = "Запрос (в конструкторе)";
	Иначе                                  
		Элементы.ТекстЗапроса.ТолькоПросмотр = Ложь;
		Элементы.ГруппаЗапросСтраницы.ПодчиненныеЭлементы.СтраницаЗапрос.Заголовок = "Запрос";
	КонецЕсли;
	
	РедактируемыйЗапрос = Элементы.ПакетЗапросов.ТекущаяСтрока;
	
	ОбновитьСостояниеЭлементовФормыАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросов_Инициализировать(Элемент = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ПакетЗапросов;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
		ПодчиненныйЭлемент.ВКонструкторе = Ложь;
		ПакетЗапросов_Инициализировать(ПодчиненныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросов_Новый()
	
	ПакетЗапросов.ПолучитьЭлементы().Очистить();
	КоличествоЗапросов = 0;
	ИнициализироватьЗапрос(ПакетЗапросов.ПолучитьЭлементы().Добавить());
	ПакетЗапросов_Инициализировать();
	Модифицированность = Ложь;
	УстановитьИмяФайлаЗапросов();
	РедактируемыйЗапрос = -1;
	
	ОпцияИнтервалАвтосохранения = 60;
	ОпцияСохранятьКомментарии = Истина;
	ОпцияАвтосохранениеПередВыполнениемЗапроса = Истина;
	ОпцияИнтервалОбновленияВыполненияАлгоритма = 1000;
	Объект.ОпцияОбрабатывать__ = Истина;
	Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма = 1000;
	
КонецПроцедуры

&НаКлиенте
Функция ПакетЗапросов_СтрокиВМассив(Строки)
	
	маСтроки = Новый Массив;
	
	Для Каждого Элемент Из Строки.ПолучитьЭлементы() Цикл
		стЭлемент = Новый Структура("Имя, ТекстЗапроса, ТекстКод, МетодИсполненияКода, ПараметрыЗапроса, ВременныеТаблицы, Строки, Инфо");
		ЗаполнитьЗначенияСвойств(стЭлемент, Элемент);
		стЭлемент.Строки = ПакетЗапросов_СтрокиВМассив(Элемент);
		маСтроки.Добавить(стЭлемент);
	КонецЦикла;
		
	Возврат маСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПакетЗапросов_СохранитьНаСервере(Знач стДанныеДляЗаписи)
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, стДанныеДляЗаписи, НазначениеТипаXML.Явное);
	Возврат Запись.Закрыть();
КонецФункции

&НаКлиенте
Процедура ПакетЗапросов_Сохранить(стрИмяФайла, фТолькоЗаголовок = Ложь)
	
	//сохраняемые состояния ++
	СохраняемыеСостояния_Сохранить("ВидРезультата", ВидРезультата);
	СохраняемыеСостояния_Сохранить("ОграничениеВыводимыхСтрок", ОграничениеВыводимыхСтрок);
	СохраняемыеСостояния_Сохранить("ОграничениеВыводимыхСтрокВкл", ОграничениеВыводимыхСтрокВкл);
	СохраняемыеСостояния_Сохранить("ОграничениеВыводимыхСтрокПервые", ОграничениеВыводимыхСтрокПервые);
	СохраняемыеСостояния_Сохранить("ОграничениеВыводимыхСтрокПервыеВкл", ОграничениеВыводимыхСтрокПервыеВкл);
	//сохраняемые состояния --
	
	стПакетЗапросов = Новый Массив;
	
	стОпции = Новый Структура("
		|ОпцияСохранятьКомментарии,
		|ОпцияАвтосохранениеПередВыполнениемЗапроса,
		|ОпцияОбрабатывать__,
		|ОпцияИнтервалОбновленияВыполненияАлгоритма,
		|ОпцияИнтервалАвтосохранения",
		ОпцияСохранятьКомментарии,
		ОпцияАвтосохранениеПередВыполнениемЗапроса,
		Объект.ОпцияОбрабатывать__,
		Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма,
		ОпцияИнтервалАвтосохранения);
		
	стДанныеДляЗаписи = Новый Структура("
		|Формат,      
		|Версия,
		|КоличествоЗапросов,
		|ИмяФайла,
		|СохраняемыеСостояния,
		|Опции",
		стрСигнатураКонсоли,
		чВерсияФормата,
		КоличествоЗапросов,
		ИмяФайлаЗапросов,
		Объект.СохраняемыеСостояния,
		стОпции);
		
	Если НЕ фТолькоЗаголовок Тогда
		стДанныеДляЗаписи.Вставить("ПакетЗапросов", ПакетЗапросов_СтрокиВМассив(ПакетЗапросов));
	КонецЕсли;
		
	Запись = Новый ЗаписьТекста(стрИмяФайла);
	Запись.ЗаписатьСтроку(ПакетЗапросов_СохранитьНаСервере(стДанныеДляЗаписи));
	Запись.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросов_ДобавитьСтрокиИзМассива(Строка, маЭлементы)
	
	ЭлементыСтроки = Строка.ПолучитьЭлементы();
	
	Для Каждого стЭлемент Из маЭлементы Цикл
		Элемент = ЭлементыСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, стЭлемент);
		ПакетЗапросов_ДобавитьСтрокиИзМассива(Элемент, стЭлемент.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПакетЗапросов_ЗагрузитьНаСервере(Знач стрЗагруженныеДанные)
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(стрЗагруженныеДанные);
	стЗагруженныеДанные = СериализаторXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	Возврат стЗагруженныеДанные;
	
КонецФункции	

//Загружает пакет запросов.
//Если файл содержит только заголовок, ничего не грузить, только возвращает заголовок (кроме сохраняемых состояний, если они еще пустые).
&НаКлиенте
Функция ПакетЗапросов_Загрузить(стрИмяФайла)
	
	Чтение = Новый ЧтениеТекста(стрИмяФайла);
	стрЗагруженныеДанные = Чтение.Прочитать();
	стЗагруженныеДанные = ПакетЗапросов_ЗагрузитьНаСервере(стрЗагруженныеДанные);
	
	фОК = Истина;
	фОК = фОК И стЗагруженныеДанные.Свойство("Формат");
	фОК = фОК И стЗагруженныеДанные.Формат = стрСигнатураКонсоли;
	фОК = фОК И стЗагруженныеДанные.Свойство("Версия");
	
	Если НЕ фОК Тогда
		ОшибкаКонсоли("Не верный формат файла!");
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия > чВерсияФормата Тогда
		ОшибкаКонсоли("Используется более новая версия формата. Обновите консоль запросов!");
	КонецЕсли;
	
	//Сохраняемые состояния - структура, предназначена для сохранения значений, которых нет в опциях (состояния флажков форм,
	//разных значений, и т.д.). Записывается в файл. Из файла читается только при первом открытии.
	Если НЕ ЗначениеЗаполнено(Объект.СохраняемыеСостояния) Тогда
		Если стЗагруженныеДанные.Версия >= 11 Тогда
			Объект.СохраняемыеСостояния = стЗагруженныеДанные.СохраняемыеСостояния;
		Иначе
			Объект.СохраняемыеСостояния = Новый Структура;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ стЗагруженныеДанные.Свойство("ПакетЗапросов") Тогда
		Возврат стЗагруженныеДанные;
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия >= 2 Тогда
		стОпции = стЗагруженныеДанные.Опции;
		ОпцияСохранятьКомментарии = стОпции.ОпцияСохранятьКомментарии;
	Иначе
		ОпцияСохранятьКомментарии = Истина;
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия >= 3 Тогда
		ОпцияИнтервалАвтосохранения = стОпции.ОпцияИнтервалАвтосохранения;
	Иначе
		ОпцияИнтервалАвтосохранения = 60;
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия >= 6 Тогда
		ОпцияАвтосохранениеПередВыполнениемЗапроса = стОпции.ОпцияАвтосохранениеПередВыполнениемЗапроса;
	Иначе
		ОпцияАвтосохранениеПередВыполнениемЗапроса = Истина;
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия >= 8 Тогда
		Объект.ОпцияОбрабатывать__ = стОпции.ОпцияОбрабатывать__;
	Иначе
		Объект.ОпцияОбрабатывать__ = Истина;
	КонецЕсли;
	
	Если стЗагруженныеДанные.Версия >= 10 Тогда
		Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма = стОпции.ОпцияИнтервалОбновленияВыполненияАлгоритма;
	Иначе
		Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма = 1000;
	КонецЕсли;
	
	КоличествоЗапросов = стЗагруженныеДанные.КоличествоЗапросов;
	
	ПакетЗапросов.ПолучитьЭлементы().Очистить();
	ПакетЗапросов_ДобавитьСтрокиИзМассива(ПакетЗапросов, стЗагруженныеДанные.ПакетЗапросов);
	
	Для Каждого ЭлементПакета Из ПакетЗапросов.ПолучитьЭлементы() Цикл
		Элементы.ПакетЗапросов.Развернуть(ЭлементПакета.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ПакетЗапросов_Инициализировать();

	Модифицированность = Ложь;
	
	Возврат стЗагруженныеДанные;
	
КонецФункции

&НаКлиенте
Функция ПакетЗапросов_ТекущийЗапрос()
	Возврат Элементы.ПакетЗапросов.ТекущаяСтрока;
КонецФункции

#КонецОбласти

#Область Запрос

&НаКлиенте
Функция Запрос_ПолучитьДанныеЗапроса(идЗапрос)
	
	Если идЗапрос = Неопределено Тогда
		Возврат Новый Структура("Имя, Запрос, Параметры, ВКонструкторе", "", "", Неопределено, Ложь);
	КонецЕсли;
	
	СтрокаЗапроса = ПакетЗапросов.НайтиПоИдентификатору(идЗапрос);
	Возврат Новый Структура(
		"Имя, Запрос, ТекстКод, МетодИсполненияКода, Параметры, ВременныеТаблицы, ВКонструкторе",
		СтрокаЗапроса.Имя, СтрокаЗапроса.ТекстЗапроса, СтрокаЗапроса.ТекстКод, СтрокаЗапроса.МетодИсполненияКода, СтрокаЗапроса.ПараметрыЗапроса, СтрокаЗапроса.ВременныеТаблицы, СтрокаЗапроса.ВКонструкторе
	);
	
КонецФункции

&НаКлиенте
Процедура Запрос_ПоместитьДанныеЗапроса(идЗапрос, стрТекстЗапроса, стрТекстКод = Неопределено, МетодИсполненияКода = Неопределено, сзПараметрыЗапроса = Неопределено, сзВременныеТаблицы = Неопределено)
	
	СтрокаЗапроса = ПакетЗапросов.НайтиПоИдентификатору(идЗапрос);
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапроса.ТекстЗапроса = стрТекстЗапроса;
	
	Если стрТекстКод <> Неопределено Тогда
		СтрокаЗапроса.ТекстКод = стрТекстКод;
	КонецЕсли;
	
	Если сзПараметрыЗапроса <> Неопределено Тогда
		СтрокаЗапроса.ПараметрыЗапроса = сзПараметрыЗапроса;
	КонецЕсли;
	
	Если сзВременныеТаблицы <> Неопределено Тогда
		СтрокаЗапроса.ВременныеТаблицы = сзВременныеТаблицы;
	КонецЕсли;
	
	Если МетодИсполненияКода <> Неопределено Тогда
		СтрокаЗапроса.МетодИсполненияКода = МетодИсполненияКода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Запрос_УстановитьВКонструкторе(идЗапрос, фВКонструкторе)
	ПакетЗапросов.НайтиПоИдентификатору(идЗапрос).ВКонструкторе = фВКонструкторе;
КонецПроцедуры

&НаКлиенте
Функция Запрос_ПолучитьВКонструкторе(идЗапрос)
	Возврат ПакетЗапросов.НайтиПоИдентификатору(идЗапрос).ВКонструкторе;
КонецФункции

#КонецОбласти

#Область ОбработкаКомментариевЗапроса

&НаКлиенте
Процедура КомментарииЗапроса_СохранитьДанныеИсходногоЗапроса(стрТекстЗапроса)
	
	Если НЕ ОпцияСохранятьКомментарии Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомментариев = стрТекстЗапроса;
	
КонецПроцедуры

&НаКлиенте
Функция КомментарииЗапроса_СтрокаБезКомментариев(стр)
	
	чПозицияКомментария = Найти(стр, "//");
	
	Если чПозицияКомментария = 0 Тогда
		Возврат стр;
	КонецЕсли;
	
	Возврат Лев(стр, чПозицияКомментария - 1);
	
КонецФункции

&НаКлиенте
Функция КомментарииЗапроса_КомментарийСтроки(стр)
	
	чПозицияКомментария = Найти(стр, "//");
	
	Если чПозицияКомментария = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Прав(стр, СтрДлина(стр) - чПозицияКомментария + 1);
	
КонецФункции

&НаКлиенте
Процедура КомментарииЗапроса_Восстановить(стрТекстЗапроса)
	
	Если НЕ ОпцияСохранятьКомментарии Тогда
		Возврат;
	КонецЕсли;
	
	чГлубинаПоиска = 50;
	
	ИсходныйЗапрос = Новый ТекстовыйДокумент;
	ИсходныйЗапросУпр = Новый Массив;
	НовыйЗапрос = Новый ТекстовыйДокумент;
	РезультатЗапрос = Новый ТекстовыйДокумент;
	ИсходныйЗапрос.УстановитьТекст(ДанныеКомментариев);
	НовыйЗапрос.УстановитьТекст(стрТекстЗапроса);
	чКоличествоСтрокНового = НовыйЗапрос.КоличествоСтрок();
	чКоличествоСтрокИсходного = ИсходныйЗапрос.КоличествоСтрок();
	
	Для й = 1 По чКоличествоСтрокИсходного Цикл
		ИсходныйЗапросУпр.Добавить(ВРег(СокрЛП(КомментарииЗапроса_СтрокаБезКомментариев(ИсходныйЗапрос.ПолучитьСтроку(й)))));
	КонецЦикла;
	
	чСтрокаИсходного = 1;
	чСтрокаНового = 1;
	
	//начальные комментарии переносим до поиска
	Пока чСтрокаИсходного <= чКоличествоСтрокИсходного Цикл
		стрИсходного = ИсходныйЗапрос.ПолучитьСтроку(чСтрокаИсходного);
		Если Лев(СокрЛП(стрИсходного), 2) = "//" Тогда
			РезультатЗапрос.ДобавитьСтроку(стрИсходного);
		Иначе
			Прервать;
		КонецЕсли;
		чСтрокаИсходного = чСтрокаИсходного + 1;
	КонецЦикла;
	
	Пока чСтрокаНового <= чКоличествоСтрокНового Цикл
		
		стрНового = НовыйЗапрос.ПолучитьСтроку(чСтрокаНового);
		
		чНайденнаяСтрокаИсходного = 0;
		Если ЗначениеЗаполнено(стрНового) Тогда
			чСтрокИскать = ?(чСтрокаИсходного + чГлубинаПоиска < чКоличествоСтрокИсходного, чГлубинаПоиска, чКоличествоСтрокИсходного - чСтрокаИсходного);
			стрНовогоУпр = ВРег(СокрЛП(стрНового));
			Для й = чСтрокаИсходного По чСтрокаИсходного + чСтрокИскать Цикл
				Если стрНовогоУпр = ИсходныйЗапросУпр[й - 1] Тогда
					чНайденнаяСтрокаИсходного = й;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если чНайденнаяСтрокаИсходного > 0 Тогда
			
			Для й = 0 По чНайденнаяСтрокаИсходного - чСтрокаИсходного - 1 Цикл
				
				стрИсходного = ИсходныйЗапрос.ПолучитьСтроку(чСтрокаИсходного + й);
				
				Если Лев(СокрЛ(стрИсходного), 2) = "//" Тогда
					Если НЕ ПустаяСтрока(СтрЗаменить(стрИсходного, "/", "")) Тогда
						РезультатЗапрос.ДобавитьСтроку(стрИсходного);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КомментарииЗапроса_КомментарийСтроки(стрИсходного)) Тогда
					Если Лев(СокрЛП(стрИсходного), 2) = "//" Тогда
						РезультатЗапрос.ДобавитьСтроку(стрИсходного);
					Иначе
						РезультатЗапрос.ДобавитьСтроку("//" + стрИсходного);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			стрКомментарий = КомментарииЗапроса_КомментарийСтроки(ИсходныйЗапрос.ПолучитьСтроку(чНайденнаяСтрокаИсходного));
			РезультатЗапрос.ДобавитьСтроку(стрНового + стрКомментарий);
			чСтрокаИсходного = чНайденнаяСтрокаИсходного + 1;  
			
		Иначе
			РезультатЗапрос.ДобавитьСтроку(стрНового);
		КонецЕсли;
		
		чСтрокаНового = чСтрокаНового + 1;
		
	КонецЦикла;
	
	//теперь все что осталось из исходного
	Для й = чСтрокаИсходного По чКоличествоСтрокИсходного Цикл
		стрИсходного = ИсходныйЗапрос.ПолучитьСтроку(й);
		Если ЗначениеЗаполнено(КомментарииЗапроса_КомментарийСтроки(стрИсходного)) Тогда
			Если Лев(СокрЛП(стрИсходного), 2) = "//" Тогда
				РезультатЗапрос.ДобавитьСтроку(стрИсходного);
			Иначе
				РезультатЗапрос.ДобавитьСтроку("//" + стрИсходного);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	стрТекстЗапроса = РезультатЗапрос.ПолучитьТекст();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПараметровВТекстеЗапроса

&НаКлиенте
Функция ПолучитьСимволыКонцаПараметра()
	Возврат ",+-*/<>=) " + Символы.ПС + Символы.ВК + Символы.Таб;
КонецФункции

&НаКлиенте
Функция ЕстьПараметр(стрТекстЗапроса, стрИмяПараметра)
	
	стрСимволыКонцаПараметра = ПолучитьСимволыКонцаПараметра();
	чДлиннаПараметра = СтрДлина(стрИмяПараметра);
	чДлиннаТекста = СтрДлина(стрТекстЗапроса);
	п = 1;
	Пока п <= чДлиннаТекста Цикл
		п = СтрНайти(стрТекстЗапроса, стрИмяПараметра, , п);
		Если п = 0 Тогда
			Прервать;
		КонецЕсли;
		с = Сред(стрТекстЗапроса, п + чДлиннаПараметра, 1);
		Если с = "" ИЛИ Найти(стрСимволыКонцаПараметра, с) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		п = п + чДлиннаПараметра;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗаменитьПараметр(стрТекстЗапроса, стрСтароеИмяПараметра, стрНовоеИмяПараметра)
	
	стрСимволыКонцаПараметра = ПолучитьСимволыКонцаПараметра();
	чДлиннаПараметра = СтрДлина(стрСтароеИмяПараметра);
	чДлиннаТекста = СтрДлина(стрТекстЗапроса);
	маЧасти = Новый Массив;
	п = 1;
	Пока п <= чДлиннаТекста Цикл
		п1 = СтрНайти(стрТекстЗапроса, стрСтароеИмяПараметра, , п);
		Если п1 = 0 Тогда
			маЧасти.Добавить(Сред(стрТекстЗапроса, п));
			Прервать;
		КонецЕсли;
		с = Сред(стрТекстЗапроса, п1 + чДлиннаПараметра, 1);
		Если с = "" ИЛИ Найти(стрСимволыКонцаПараметра, с) > 0 Тогда
			маЧасти.Добавить(Сред(стрТекстЗапроса, п, п1 - п));
			маЧасти.Добавить(стрНовоеИмяПараметра);
		Иначе
			маЧасти.Добавить(Сред(стрТекстЗапроса, п, п1 - п + чДлиннаПараметра));
		КонецЕсли;
		п = п1 + чДлиннаПараметра;
	КонецЦикла;
	
	Возврат СтрСоединить(маЧасти);
	
КонецФункции

#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ПодключитьОбработчикАвтосохранения()
	Если ОпцияИнтервалАвтосохранения > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикАвтосохранения", ОпцияИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикАвтосохранения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПолучениеРабочегоКаталогаДанныхПользователя(КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("КаталогДанныхПользователя", КаталогДанныхПользователя);
	Выполнить(ДополнительныеПараметры.Продолжение + "(ДополнительныеПараметры)");
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("Существует", Существует);
	Выполнить(ДополнительныеПараметры.Продолжение + "(ДополнительныеПараметры);");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтобразитьСостояниеВыполненияАлгоритма();
	ПриОткрытииПродолжение();
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытииПродолжение(ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ДополнительныеПараметры = Новый Структура("Продолжение, ТочкаПродолжения", "ПриОткрытииПродолжение", "ПослеПолученияРабочегоКаталога");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПолучениеРабочегоКаталогаДанныхПользователя", ЭтаФорма, ДополнительныеПараметры);
		НачатьПолучениеРабочегоКаталогаДанныхПользователя(ОписаниеОповещения);
		
	ИначеЕсли ДополнительныеПараметры.ТочкаПродолжения = "ПослеПолученияРабочегоКаталога" Тогда
		
		КаталогДанныхПользователя = ДополнительныеПараметры.КаталогДанныхПользователя;
		ИмяФайлаАвтосохраненияСостояния = КаталогДанныхПользователя + стрСигнатураКонсоли + "." + стрРасширениеАвтосохранения;
	
		стрИмяФайлаАвтосохраненияТемп = ИмяФайлаАвтосохраненияСостояния;
		Файл = Новый Файл(стрИмяФайлаАвтосохраненияТемп);
		ДополнительныеПараметры = Новый Структура("Продолжение, ТочкаПродолжения", "ПриОткрытииПродолжение", "ПослеПроверкиСуществованияСохранения");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуСуществования", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
	ИначеЕсли ДополнительныеПараметры.ТочкаПродолжения = "ПослеПроверкиСуществованияСохранения" Тогда
		
		Если НЕ ДополнительныеПараметры.Существует Тогда
			ПакетЗапросов_Новый();
			ПриОткрытииЗавершение();
			Возврат;
		КонецЕсли;
		
		стрИмяФайлаАвтосохраненияТемп = ИмяФайлаАвтосохраненияСостояния;
		Попытка
			стЗаголовок = ПакетЗапросов_Загрузить(стрИмяФайлаАвтосохраненияТемп);
		Исключение
			//Состояние прочитать не удалось, файл испорчен.
			ПакетЗапросов_Новый();
			ПриОткрытииЗавершение();
			Возврат;
		КонецПопытки;
		
		Если стЗаголовок.Свойство("ПакетЗапросов") Тогда
				
			Модифицированность = Истина;
			ПриОткрытииЗавершение();//Загружено автосохранение из темп, список запросов в файл не сохранялся.
			
		Иначе
			
			ИмяФайлаЗапросов = стЗаголовок.ИмяФайла;
			УстановитьИмяФайлаЗапросов(ИмяФайлаЗапросов);
			стрИмяФайлаАвтосохранения = ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов);
			
			Файл = Новый Файл(стрИмяФайлаАвтосохранения);
			ДополнительныеПараметры = Новый Структура("Продолжение, ТочкаПродолжения, ИмяФайлаАвтосохранения", "ПриОткрытииПродолжение", "ПослеПроверкиСуществованияАвтосохранения", стрИмяФайлаАвтосохранения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуСуществования", ЭтаФорма, ДополнительныеПараметры);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ТочкаПродолжения = "ПослеПроверкиСуществованияАвтосохранения" Тогда
		
		Попытка
			Если ДополнительныеПараметры.Существует Тогда
				ПакетЗапросов_Загрузить(ДополнительныеПараметры.ИмяФайлаАвтосохранения);
				Модифицированность = Истина;
				ПриОткрытииЗавершение();//Загружено из автосохранения измененного файла.
				Возврат;
			КонецЕсли;
		Исключение
			//Автосохранение не загрузили - файл испорчен. Грузим основной файл.
		КонецПопытки;

		Файл = Новый Файл(ИмяФайлаЗапросов);
		ДополнительныеПараметры = Новый Структура("Продолжение, ТочкаПродолжения", "ПриОткрытииПродолжение", "ПослеПроверкиСуществованияФайла");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуСуществования", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
			
	ИначеЕсли ДополнительныеПараметры.ТочкаПродолжения = "ПослеПроверкиСуществованияФайла" Тогда
		
		Если ДополнительныеПараметры.Существует Тогда
			ПакетЗапросов_Загрузить(ИмяФайлаЗапросов);
			ПриОткрытииЗавершение();//Загружено из основного файла.
		Иначе
			ПакетЗапросов_Новый();
			ПриОткрытииЗавершение();//Не найден файл, который в информации последнего состояния (перемещен или удален). Значит, будет новый пакет.
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииЗавершениеНаСервере()
	
	//Сохраняемые значения +++
	
	ВидРезультата = СохраняемыеСостояния_Получить("ВидРезультата", "таблица");
	ОграничениеВыводимыхСтрок = СохраняемыеСостояния_Получить("ОграничениеВыводимыхСтрок", "1000");
	ОграничениеВыводимыхСтрокВкл = СохраняемыеСостояния_Получить("ОграничениеВыводимыхСтрокВкл", Истина);
	ОграничениеВыводимыхСтрокПервые = СохраняемыеСостояния_Получить("ОграничениеВыводимыхСтрокПервые", 1000);
	ОграничениеВыводимыхСтрокПервыеВкл = СохраняемыеСостояния_Получить("ОграничениеВыводимыхСтрокПервыеВкл", Ложь);
	
	фВидимостьПакетаРезультатаЗапроса = СохраняемыеСостояния_Получить("ВидимостьПакетаРезультатаЗапроса", Ложь);
	Если Элементы.ОтобразитьСкрытьПакетРезультатаЗапроса.Пометка <> фВидимостьПакетаРезультатаЗапроса Тогда
		Элементы.ОтобразитьСкрытьПакетРезультатаЗапроса.Пометка = фВидимостьПакетаРезультатаЗапроса;
		Элементы.ПакетРезультатаЗапроса.Видимость = фВидимостьПакетаРезультатаЗапроса;
		Элементы.РезультатВПакете.Видимость = НЕ фВидимостьПакетаРезультатаЗапроса;
	КонецЕсли;
	
	фПараметрыЗапросаРядомСТекстом = СохраняемыеСостояния_Получить("ПараметрыЗапросаРядомСТекстом", Истина);
	Если Элементы.ПараметрыЗапросаРядомСТекстом.Пометка <> фПараметрыЗапросаРядомСТекстом Тогда
		Элементы.ПараметрыЗапросаРядомСТекстом.Пометка = фПараметрыЗапросаРядомСТекстом;
		ПараметрыЗапросаРядомСТекстомНаСервере();
	КонецЕсли;
	
	//Сохраняемые значения ---
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	
	ПриОткрытииЗавершениеНаСервере();
	ПолучитьИмяФайлаОбработкиНаСервере();
	ПодключитьОбработчикАвтосохранения();
	УстановитьСостоянияЭлементов();
	
	Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.Инициализация(ЭтаФорма);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	ЗапросВКонструкторе = -1;
	РедактируемыйЗапрос = -1;
	
	ИспользуемоеИмяФайла = РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	
	Элементы.ВременныеТаблицыЗначение.КартинкаКнопкиВыбора = БиблиотекаКартинок.Изменить;
	
	Заголовок = "Консоль запросов 9000 v" + Объект.ВерсияОбработки;
	
	МакроПараметр = "__";
	
	//Это нужно для правильной отрисовки области результата запроса до его выполнения.
	маДобавляемыеРеквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы("Пустой", Новый ОписаниеТипов, "РезультатЗапроса");
	маДобавляемыеРеквизиты.Добавить(Реквизит);
	ИзменитьРеквизиты(маДобавляемыеРеквизиты);
	Элемент = Элементы.Добавить("Пустой", Тип("ПолеФормы"), Элементы.РезультатЗапроса);
	Элемент.ПутьКДанным = "РезультатЗапроса.Пустой";
	Элемент.ОтображатьВШапке = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтосохранения() Экспорт
	
	Если Модифицированность Тогда
		Автосохранить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//Сохраним состояние.
	ПакетЗапросов_Сохранить(ИмяФайлаАвтосохраненияСостояния, Истина);
	
	Если ЗавершениеРаботы = Истина Тогда
		
		Если Модифицированность Тогда
			ТекстПредупреждения = "В консоли запросов 9000 имеется не сохраненный пакет запросов.";
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		
		Если НЕ СохранитьСВопросом("Завершение") Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ИзменитьИмяПараметраВТекстеЗапроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекстЗапроса.УстановитьТекст(ЗаменитьПараметр(ТекстЗапроса.ПолучитьТекст(), "&" + ДополнительныеПараметры.СтароеЗначениеИмяПараметра, "&" + ДополнительныеПараметры.ИмяПараметра));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеИмениПараметра(НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	стрИмяПараметра = Элементы.ПараметрыЗапроса.ТекущиеДанные.Имя;
	Если ЗначениеЗаполнено(стрИмяПараметра) И стрИмяПараметра = СтароеЗначениеИмяПараметра Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяКорректно(стрИмяПараметра) Тогда
		ПоказатьПредупреждение(, "Неверное имя параметра! Имя должно состоять из одного слова, начинаться с буквы и не содержать специальных символов кроме ""_"".", , Заголовок);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	маСтрокиИмени = ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", стрИмяПараметра));
	Если маСтрокиИмени.Количество() > 1 Тогда
		ПоказатьПредупреждение(, "Параметр с таким именем уже есть! Введите другое имя.", , Заголовок);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ НоваяСтрока И ЗначениеЗаполнено(СтароеЗначениеИмяПараметра) Тогда
		стрТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
		Если ЕстьПараметр(стрТекстЗапроса, "&" + СтароеЗначениеИмяПараметра) Тогда
			ДополнительныеПараметры = Новый Структура("СтароеЗначениеИмяПараметра, ИмяПараметра", СтароеЗначениеИмяПараметра, стрИмяПараметра);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ИзменитьИмяПараметраВТекстеЗапроса", ЭтаФорма, ДополнительныеПараметры),
				"Запрос содержит изменяемое мия параметра. Изменить имя параметра в тексте запроса?",
				РежимДиалогаВопрос.ДаНет,
				,
				КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбработатьИзменениеИмениПараметра(НоваяСтрока, ОтменаРедактирования, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СтароеЗначениеИмяПараметра = "";
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПакетЗапросов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.Инициализирован Тогда
		ИнициализироватьЗапрос(Элементы.ПакетЗапросов.ТекущиеДанные);
	КонецЕсли;
	
	ИзвлечьРедактируемыйЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьЗапрос(Ложь);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	ПоместитьРедактируемыйЗапрос();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	ПоместитьРедактируемыйЗапрос();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКонтейнера > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Элемент.Родитель.ТекущаяСтрока, "Контейнер");
		ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
		ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения, Заголовок, Значение, ТипКонтейнера", Объект, ТекущиеДанные.ТипЗначения, ТекущиеДанные.Имя, ТекущиеДанные.Контейнер, ТекущиеДанные.ТипКонтейнера);
		
		Если ТекущиеДанные.ТипКонтейнера = 3 Тогда
			ИмяФормыРедактирования = "РедактированиеТаблицы";
		Иначе
			ИмяФормыРедактирования = "ПодборВСписок";
		КонецЕсли;
		
		ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма." + ИмяФормыРедактирования, ПараметрыОткрытия, ЭтаФорма, Ложь, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Контейнер) = Тип("Структура") Тогда
		
		Если ТекущиеДанные.Контейнер.Тип = "МоментВремени" ИЛИ ТекущиеДанные.Контейнер.Тип = "Граница" Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Элемент.Родитель.ТекущаяСтрока, "Контейнер");
			ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
			ПараметрыОткрытия = Новый Структура("Объект, Значение", Объект, ТекущиеДанные.Контейнер);
			ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеГраницыМомента", ПараметрыОткрытия, ЭтаФорма, Ложь, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТекущиеДанные.Контейнер.Тип = "Тип" Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Элемент.Родитель.ТекущаяСтрока, "КонтейнерКакТип");
			ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
			ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения, ТипКонтейнера", Объект, ТекущиеДанные.Контейнер, ТекущиеДанные.ТипКонтейнера);
			ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеТипа", ПараметрыОткрытия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("УникальныйИдентификатор") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Элемент.Родитель.ТекущаяСтрока, "Значение");
			ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
			ПараметрыОткрытия = Новый Структура("Объект, Значение", Объект, ТекущиеДанные.Значение);
			ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеУникальногоИдентификатора", ПараметрыОткрытия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВводаЗначения()
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ПараметрыЗапросаЗначение.КартинкаКнопкиВыбора = Новый Картинка;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипКонтейнера) Тогда
			
			Элементы.ПараметрыЗапросаЗначение.КнопкаОчистки = Ложь;
			Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора = Истина;
			Элементы.ПараметрыЗапросаЗначение.ВыбиратьТип = Ложь;
			Элементы.ПараметрыЗапросаЗначение.РедактированиеТекста = Ложь;
			Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			Элементы.ПараметрыЗапросаЗначение.КартинкаКнопкиВыбора = БиблиотекаКартинок.Изменить;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.Контейнер) = Тип("Структура") Тогда
			
			Элементы.ПараметрыЗапросаЗначение.КнопкаОчистки = Ложь;
			Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора = Истина;
			Элементы.ПараметрыЗапросаЗначение.ВыбиратьТип = Ложь;
			Элементы.ПараметрыЗапросаЗначение.КартинкаКнопкиВыбора = БиблиотекаКартинок.Изменить;
			Элементы.ПараметрыЗапросаЗначение.РедактированиеТекста = Ложь;
			Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			
		Иначе
			
			Элементы.ПараметрыЗапросаЗначение.РедактированиеТекста = Истина;
			Если ЗначениеЗаполнено(ТекущиеДанные.ТипЗначения) Тогда
				Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
			Иначе
				Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = Новый ОписаниеТипов;
			КонецЕсли;
			
			Если ТекущиеДанные.Значение = Неопределено И Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа.Типы().Количество() > 1 Тогда
				
				Элементы.ПараметрыЗапросаЗначение.ВыбиратьТип = Истина;
				Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора = Истина;
				Элементы.ПараметрыЗапросаЗначение.КнопкаОчистки = Ложь;
				Элементы.ПараметрыЗапросаЗначение.КартинкаКнопкиВыбора = Элементы.Картинка_ВыборТипа.Картинка;
				
			Иначе
				
				Элементы.ПараметрыЗапросаЗначение.ВыбиратьТип = Ложь;
				Элементы.ПараметрыЗапросаЗначение.КнопкаОчистки = Истина;
				Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора = НужнаКнопкаВыбораЗначению(ТекущиеДанные.Значение);

			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриАктивизацииСтроки(Элемент)
	УстановитьПараметрыВводаЗначения();
КонецПроцедуры

&НаКлиенте
Функция ДобавитьПараметрСКонтролемИмени(ИмяПараметра)
	
	стрИспользуемоеИмяПараметра = ИмяПараметра;
	й = 1;
	Пока Истина Цикл
		
		маЪ = ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", стрИспользуемоеИмяПараметра));
		Если маЪ.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		стрИспользуемоеИмяПараметра = ИмяПараметра + й;
		й = й + 1;
		
	КонецЦикла;
	
	НоваяСтрока = ПараметрыЗапроса.Добавить();
	НоваяСтрока.Имя = стрИспользуемоеИмяПараметра;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОкончаниеРедактированияСтроки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Поле = "Контейнер" Тогда
			Если ДополнительныеПараметры.Таблица = "ПараметрыЗапроса" Тогда
				ПараметрыЗапроса_СохранитьЗначение(ДополнительныеПараметры.Строка, РезультатЗакрытия.Значение);
			ИначеЕсли ДополнительныеПараметры.Таблица = "ВременныеТаблицы" Тогда
				СтрокаТаблицы = ВременныеТаблицы.НайтиПоИдентификатору(ДополнительныеПараметры.Строка);
				СтрокаТаблицы.Контейнер = РезультатЗакрытия.Значение;
				СтрокаТаблицы.Значение = СтрокаТаблицы.Контейнер.Представление;
				Модифицированность = Истина;
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.Поле = "КонтейнерКакТип" Тогда
			ПараметрыЗапроса_СохранитьЗначение(ДополнительныеПараметры.Строка, РезультатЗакрытия.ОписаниеКонтейнера);
		ИначеЕсли ДополнительныеПараметры.Поле = "ТипЗначения" Тогда
			
			ОписаниеКонтейнера = РезультатЗакрытия.ОписаниеКонтейнера;
			
			идСтрокаПараметра = ДополнительныеПараметры.Строка;
			Если идСтрокаПараметра = Неопределено Тогда
				//добавление нового параметра
				СтрокаПараметра = ДобавитьПараметрСКонтролемИмени(РезультатЗакрытия.ИмяПараметра);
				СтрокаПараметра.ТипКонтейнера = РезультатЗакрытия.ТипКонтейнера;
				идСтрокаПараметра = СтрокаПараметра.ПолучитьИдентификатор();
			КонецЕсли;
				
			ПараметрыЗапроса_УстановитьТип(идСтрокаПараметра, РезультатЗакрытия.ТипКонтейнера, ОписаниеКонтейнера);
			
			стрТекстЗапроса = Неопределено;
			Если РезультатЗакрытия.Свойство("ТекстЗапроса", стрТекстЗапроса) Тогда
				
				Если СтрокаПараметра <> Неопределено И СтрокаПараметра.Имя <> РезультатЗакрытия.ИмяПараметра Тогда
					стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса, "&" + РезультатЗакрытия.ИмяПараметра, "&" + СтрокаПараметра.Имя);
				КонецЕсли;
				
				чРазмерТекста = СтрДлина(ТекстЗапроса.ПолучитьТекст());
				Элементы.ТекстЗапроса.УстановитьГраницыВыделения(чРазмерТекста + 1, чРазмерТекста + 1);
				Элементы.ТекстЗапроса.ВыделенныйТекст = стрТекстЗапроса;
				
				Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос;
				ТекущийЭлемент = Элементы.ТекстЗапроса;
				
			КонецЕсли;
			
			УстановитьПараметрыВводаЗначения();
			
		ИначеЕсли ДополнительныеПараметры.Поле = "Значение" Тогда
			Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение = РезультатЗакрытия.Значение;
			Элементы.ПараметрыЗапроса.ТекущиеДанные.Контейнер = РезультатЗакрытия.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКонтейнера < 3 Тогда
		ТипЗначения = ТекущиеДанные.ТипЗначения;
	Иначе
		ТипЗначения = ТекущиеДанные.Контейнер;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Элементы.ПараметрыЗапроса.ТекущаяСтрока, "ТипЗначения");
	ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
	ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения, ТипКонтейнера, Имя, ВЗапросРазрешено", Объект, ТипЗначения, ТекущиеДанные.ТипКонтейнера, ТекущиеДанные.Имя, Истина);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеТипа", ПараметрыОткрытия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКонтейнера = 0 Тогда
		
		ТекущиеДанные.Контейнер = ТекущиеДанные.Значение;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипЗначения) Тогда
			ТекущиеДанные.ТипЗначения = ОписаниеТиповПоТипу(ТипЗнч(ТекущиеДанные.Значение));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВременныеТаблицыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВременныеТаблицы.ТекущиеДанные;
	
	ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ВременныеТаблицы", Элементы.ВременныеТаблицы.ТекущаяСтрока, "Контейнер");
	ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
	ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения, Заголовок, Значение, ТипКонтейнера", Объект, , ТекущиеДанные.Имя, ТекущиеДанные.Контейнер, 3);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеТаблицы", ПараметрыОткрытия, ЭтаФорма, Ложь, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		ТекущаяСтрока = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Родитель = ТекущаяСтрока;
		КонецЕсли;
		
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Элементы.ПакетЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцияСохранятьКомментарииПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОпцияИнтервалАвтосохраненияПриИзменении(Элемент)
	ПодключитьОбработчикАвтосохранения();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	стрИмяКолонки = РезультатЗапросаСоответствиеКолонок[Поле.Имя];
	
	Значение = Элемент.ТекущиеДанные[стрИмяКолонки];
	
	Если РезультатЗапросаКолонкиКонтейнера.Свойство(стрИмяКолонки) Тогда
		
		Контейнер = ЭтаФорма[Элемент.Имя].НайтиПоИдентификатору(Элемент.ТекущаяСтрока)[стрИмяКолонки + "_31415926Контейнер"];
		
		Если Контейнер.Тип = "ТаблицаЗначений" Тогда
			ПараметрыОткрытия = Новый Структура("Объект, Заголовок, Значение, ТолькоПросмотр", Объект, стрИмяКолонки, Контейнер, Истина);
			ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеТаблицы", ПараметрыОткрытия, ЭтаФорма, Ложь, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьЗначение(, Контейнер.Представление);
		КонецЕсли;
		
	Иначе
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВПакетеПриИзменении(Элемент)
	Если ИзвлечьРезультат(РезультатВПакете) > 0 Тогда
		СтруктураЗаписиРезультата_Развернуть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостоянияЭлементов()
	Перем фВидимостьПакетаРезультатаЗапроса;
	
	Элементы.ОпцияОграничениеВыводимыхСтрокПервые.Доступность = ОграничениеВыводимыхСтрокПервыеВкл;
	Элементы.ОпцияОграничениеВыводимыхСтрок.Доступность = ОграничениеВыводимыхСтрокВкл;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцияОграничениеВыводимыхСтрокПервыеВклПриИзменении(Элемент)
	УстановитьСостоянияЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОпцияОграничениеВыводимыхСтрокВклПриИзменении(Элемент)
	УстановитьСостоянияЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		ОграничениеТипа = Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа;
		маТипы = Новый Массив;
		маТипы.Добавить(ВыбранноеЗначение);
		ТипЗначения = Новый ОписаниеТипов(маТипы, ОграничениеТипа.КвалификаторыЧисла, ОграничениеТипа.КвалификаторыСтроки, ОграничениеТипа.КвалификаторыДаты);
		Значение = ТипЗначения.ПривестиЗначение(Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение);
		Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение = Значение;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	УстановитьПараметрыВводаЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Контейнер) = Тип("Структура") И ТекущиеДанные.Контейнер.Тип = "УникальныйИдентификатор" Тогда
		Попытка
			Значение = Новый УникальныйИдентификатор(Текст);
		Исключение
			ВызватьИсключение "Не корректное значение уникального идентификатора";
		КонецПопытки;
		ПараметрыЗапроса_СохранитьЗначение(Элементы.ПараметрыЗапроса.ТекущаяСтрока, Значение);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКонтейнера = 0 Тогда
		чКоличествоТипов = ТекущиеДанные.ТипЗначения.Типы().Количество();
		Если чКоличествоТипов = 0 ИЛИ чКоличествоТипов > 1 Тогда
			ТекущиеДанные.Значение = Неопределено;
		Иначе
			ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ТипКонтейнера = 3 Тогда
	КонецЕсли;
	
	УстановитьПараметрыВводаЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ОпцияОбрабатывать__ПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОпцияИнтервалОбновленияВыполненияАлгоритмаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПакетРезультатаЗапросаПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ПакетРезультатаЗапроса.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ИзвлечьРезультат(ПакетРезультатаЗапроса.Индекс(ПакетРезультатаЗапроса.НайтиПоИдентификатору(ТекущаяСтрока)) + 1) > 0 Тогда
			СтруктураЗаписиРезультата_Развернуть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаписиРезультатаПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = СтруктураЗаписиРезультата.НайтиПоИдентификатору(Строка);
	
	Если НЕ СтрокаДерева.ПодчиненныеУзлыРаскрыты Тогда
		СтруктураЗаписиРезультата_РаскрытьПодчиненныеУзлы(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураЗаписиРезультатаПолучитьТекстВставки(Строка)
	
	маТекстЗначения = Новый Массив;
	
	Строка = СтруктураЗаписиРезультата.НайтиПоИдентификатору(Строка);
	Пока Строка <> Неопределено Цикл
		маТекстЗначения.Вставить(0, Строка.Имя);
		Строка = Строка.ПолучитьРодителя();             
	КонецЦикла;
	
	Возврат СтрСоединить(маТекстЗначения, ".");
		
КонецФункции

&НаКлиенте
Процедура СтруктураЗаписиРезультатаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	маЧасти = Новый Массив;
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		маЧасти.Добавить(СтруктураЗаписиРезультатаПолучитьТекстВставки(Значение));
 	КонецЦикла;
 
 	ПараметрыПеретаскивания.Значение = СтрСоединить(маЧасти, ";");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаписиРезультатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Элементы.ТекстАлгоритм.ВыделенныйТекст = СтруктураЗаписиРезультатаПолучитьТекстВставки(ВыбраннаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИзПерехваченногоЗапроса

&НаСервере
Функция ЗаполнитьИзЧтениеXML(ЧтениеXML)
	Перем стрОшибка, стрТекстЗапроса, стПараметрыЗапроса;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Попытка
		
		СтруктураПараметров = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Если СтруктураПараметров.Количество() >= 2 Тогда
			стрТекстЗапроса = Неопределено;
			Если НЕ СтруктураПараметров.Свойство("Текст", стрТекстЗапроса)
				ИЛИ НЕ СтруктураПараметров.Свойство("Параметры", стПараметрыЗапроса) Тогда
				стрОшибка = "Ошибка структуры.";
			КонецЕсли;
		Иначе
			стрОшибка = "Ошибка структуры.";
		КонецЕсли;
		
	Исключение
		стрОшибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Если ЗначениеЗаполнено(стрОшибка) Тогда
		Возврат "Не возможно сформировать запрос - ошибка структуры введенного XML.
		|Техническая информация: " + стрОшибка;
	КонецЕсли;
	
	//Чтение параметров запроса
	ТекстЗапроса.УстановитьТекст(стрТекстЗапроса);
	стОшибка = ПараметрыЗаполнитьИзЗапросаНаСервере();
	Если ЗначениеЗаполнено(стОшибка) Тогда
		Сообщить("Не удалось получить параметры из текста запроса. Параметры будут заполнены только по объекту запроса(" + стОшибка.ОписаниеОшибки + ").", СтатусСообщения.Информация);
	КонецЕсли;
	
	Для Каждого кзПараметр Из стПараметрыЗапроса Цикл
		
		маСтрокиПараметра = ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", кзПараметр.Ключ));
		Если маСтрокиПараметра.КОличество() > 0 Тогда
			СтрокаПараметра = маСтрокиПараметра[0];
		Иначе
			СтрокаПараметра = ПараметрыЗапроса.Добавить()
		КонецЕсли;
		
		СтрокаПараметра.Имя = кзПараметр.Ключ;
		СтрокаПараметра.ТипКонтейнера = ПолучитьКодФормыЗначения(кзПараметр.Значение);
		
		ТипЗначенияИзЗапроса = СтрокаПараметра.ТипЗначения;
			
		Если СтрокаПараметра.ТипКонтейнера = 0 Тогда
			ТипЗначения = ТипЗнч(кзПараметр.Значение);
		ИначеЕсли СтрокаПараметра.ТипКонтейнера = 1 Тогда
			ТипЗначения = кзПараметр.Значение.ТипЗначения;
		ИначеЕсли СтрокаПараметра.ТипКонтейнера = 2 И кзПараметр.Значение.Количество() > 0 Тогда
			ТипЗначения = ТипЗнч(кзПараметр.Значение[0]);
		Иначе
			ТипЗначения = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипЗначения) И (НЕ ЗначениеЗаполнено(ТипЗначенияИзЗапроса) ИЛИ НЕ ТипЗначенияИзЗапроса.СодержитТип(ТипЗначения)) Тогда
			Если ТипЗнч(ТипЗначения) = Тип("Тип") Тогда
				СтрокаПараметра.ТипЗначения = ОписаниеТиповПоТипу(ТипЗначения);
			Иначе
				СтрокаПараметра.ТипЗначения = ТипЗначения;
			КонецЕсли;
		КонецЕсли;
			
		ПараметрыЗапроса_СохранитьЗначение(СтрокаПараметра.ПолучитьИдентификатор(), кзПараметр.Значение);
			
	КонецЦикла;
	
	//Чтение временных таблиц.
	маТаблицы = Неопределено;
	Если СтруктураПараметров.Свойство("ВременныеТаблицы", маТаблицы) Тогда
		
		Для Каждого стТаблица Из маТаблицы Цикл
			
			тзТаблица = стТаблица.Таблица;
			
			стНовыеТипыКолонок = Новый Структура;
			Для Каждого Колонка Из тзТаблица.Колонки Цикл
				
				маТипы = Колонка.ТипЗначения.Типы();
				маНовыеТипыКолонок = Новый Массив;
				фЕстьНеизвестныйОбъект = Ложь;
				Для Каждого Тип Из маТипы Цикл
					Если Строка(Тип) <> "НеизвестныйОбъект" Тогда
						маНовыеТипыКолонок.Добавить(Тип);
					Иначе
						фЕстьНеизвестныйОбъект = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если фЕстьНеизвестныйОбъект Тогда
					
					НовыйТипКолонки = Новый ОписаниеТипов(
						маНовыеТипыКолонок,
						Колонка.ТипЗначения.КвалификаторыЧисла,
						Колонка.ТипЗначения.КвалификаторыСтроки,
						Колонка.ТипЗначения.КвалификаторыДаты,
						Колонка.ТипЗначения.КвалификаторыДвоичныхДанных);
						
					стНовыеТипыКолонок.Вставить(Колонка.Имя, НовыйТипКолонки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого кз Из стНовыеТипыКолонок Цикл
				Обработка.ИзменитьТипКолонкиТаблицыЗначений(тзТаблица, кз.Ключ, кз.Значение);
			КонецЦикла;
			
			СтрокаТаблицы = ВременныеТаблицы.Добавить();
			СтрокаТаблицы.Имя = стТаблица.Имя;
			СтрокаТаблицы.Контейнер = РеквизитФормыВЗначение("Объект").Контейнер_СохранитьЗначение(тзТаблица);
			СтрокаТаблицы.Значение = СтрокаТаблицы.Контейнер.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзФайла(стрИмяФайла)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(стрИмяФайла);
	ЗаполнитьИзЧтениеXML(ЧтениеXML);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИзXMLНаСервере()
	
	стрСигнатураЗапросаВСтроке = "<Structure xmlns=""http://v8.1c.ru/8.1/data/core""";
	стрТекстВОкнеЗапроса = ТекстЗапроса.ПолучитьТекст();
	Если Лев(стрТекстВОкнеЗапроса, СтрДлина(стрСигнатураЗапросаВСтроке)) <> стрСигнатураЗапросаВСтроке Тогда
		Возврат "В поле текста запроса должна быть строка, кодирующая запрос с параметрами. Подробности на закладке ""Информация"".";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(стрТекстВОкнеЗапроса);
	
	ЗаполнитьИзЧтениеXML(ЧтениеXML);
	
КонецФункции

#КонецОбласти

#Область ИнтерактивныеКоманды

&НаКлиенте
Процедура ЗагрузитьПакетЗапросов() Экспорт
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = стрФильтрСохранения; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаДляЗагрузкиПакетаЗапросов", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаДляЗагрузкиПакетаЗапросов(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стрИмяФайла = ВыбранныеФайлы[0];
	
	ПакетЗапросов_Загрузить(стрИмяФайла);
	УстановитьИмяФайлаЗапросов(стрИмяФайла);
	РедактируемыйЗапрос = -1;
	ПакетЗапросов_Сохранить(ИмяФайлаАвтосохраненияСостояния, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСохранения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = "Загрузка" Тогда
		ЗагрузитьПакетЗапросовПослеВопроса(РезультатВопроса, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры = "Завершение" Тогда
		ЗавершениеПослеВопроса(РезультатВопроса, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры = "Новый" Тогда
		НовыйПакетЗапросовПослеВопроса(РезультатВопроса, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПакетЗапросовПослеВопроса(РезультатВопроса, ДополнительныеПараметры)
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПакетЗапросов(Новый Структура);
		ЗагрузитьПакетЗапросов();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		фУдаленФайлАвтосохранения = Ложь;
		фУдаленФайлСостояния = Ложь;
		
		ДополнительныеПараметры = Новый Структура("ТипФайла, Продолжение", "Автосохранение", "ЗагрузитьПакетЗапросов");
		ОписаниеОповещения = Новый ОписаниеОповещения("Завершить_ПослеУдаления", ЭтаФорма, ДополнительныеПараметры);
		НачатьУдалениеФайлов(ОписаниеОповещения, ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов));
		
		ДополнительныеПараметры = Новый Структура("ТипФайла, Продолжение", "Состояние", "ЗагрузитьПакетЗапросов");
		ОписаниеОповещения = Новый ОписаниеОповещения("Завершить_ПослеУдаления", ЭтаФорма, ДополнительныеПараметры);
		НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайлаАвтосохраненияСостояния);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить_ПослеУдаления(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипФайла = "Автосохранение" Тогда
		фУдаленФайлАвтосохранения = Истина;
	ИначеЕсли ДополнительныеПараметры.ТипФайла = "Состояние" Тогда
		фУдаленФайлСостояния = Истина;
	КонецЕсли;
	
	Если фУдаленФайлАвтосохранения И фУдаленФайлСостояния Тогда
		Выполнить(ДополнительныеПараметры.Продолжение + "();");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПакетЗапросовПослеВопроса(РезультатВопроса, ДополнительныеПараметры)
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПакетЗапросов(Новый Структура("Новый", Истина));
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		фУдаленФайлАвтосохранения = Ложь;
		фУдаленФайлСостояния = Ложь;
		
		ДополнительныеПараметры = Новый Структура("ТипФайла, Продолжение", "Автосохранение", "ПакетЗапросов_Новый");
		ОписаниеОповещения = Новый ОписаниеОповещения("Завершить_ПослеУдаления", ЭтаФорма, ДополнительныеПараметры);
		НачатьУдалениеФайлов(ОписаниеОповещения, ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов));
		
		ДополнительныеПараметры = Новый Структура("ТипФайла, Продолжение", "Состояние", "ПакетЗапросов_Новый");
		ОписаниеОповещения = Новый ОписаниеОповещения("Завершить_ПослеУдаления", ЭтаФорма, ДополнительныеПараметры);
		НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайлаАвтосохраненияСостояния);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГраницыВыделенияДляОбработкиСтрок(ЭлементТекст, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка)
	
	ЭлементТекст.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
	Если НачальнаяСтрока = КонечнаяСтрока И НачальнаяКолонка = КонечнаяКолонка Тогда
		ЭлементТекст.УстановитьГраницыВыделения(1, 1, 1000000000, 1);
	Иначе
		
		Если НачальнаяКолонка > 1 Тогда
			НачальнаяКолонка = 1;
		КонецЕсли;
		
		Если КонечнаяКолонка > 1 Тогда
			КонечнаяСтрока = КонечнаяСтрока + 1;
			КонечнаяКолонка = 1;
		КонецЕсли;
		
		ЭлементТекст.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_НовыйПакетЗапросов(Команда)
	
	Если НЕ СохранитьСВопросом("Новый") Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов_Новый();	
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ЗагрузитьПакетЗапросов(Команда)
	
	Если НЕ СохранитьСВопросом("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПакетЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПакетЗапросов(Контекст)
	
	Автосохранить();
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаЗапросов) Тогда
		ПакетЗапросовСохранитьКак(Контекст);
	Иначе
		ОписаниеОповещение = Новый ОписаниеОповещения("ПослеСохраненияПакетаЗапросов", ЭтаФорма, Контекст);
		НачатьПеремещениеФайла(ОписаниеОповещение, ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов), ИмяФайлаЗапросов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_СохранитьПакетЗапросов(Команда)
	СохранитьПакетЗапросов(Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовСохранитьКак(Контекст)

	ПоместитьРедактируемыйЗапрос();
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = стрФильтрСохранения; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПакетЗапросовСохранитьКак_ПослеВыбораФайла", ЭтаФорма, Контекст);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПакетЗапросовСохранитьКак(Команда)
	ПакетЗапросовСохранитьКак(Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовСохранитьКак_ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стрИмяФайла = ВыбранныеФайлы[0];
	УстановитьИмяФайлаЗапросов(стрИмяФайла);
	
	Автосохранить();
	ОписаниеОповещение = Новый ОписаниеОповещения("ПослеСохраненияПакетаЗапросов", ЭтаФорма, ДополнительныеПараметры);
	НачатьПеремещениеФайла(ОписаниеОповещение, ПолучитьИмяФайлаАвтосохранения(ИмяФайлаЗапросов), ИмяФайлаЗапросов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПакетаЗапросов(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Ложь;
	
	Если ДополнительныеПараметры.Свойство("Завершение") Тогда
		Закрыть();
	ИначеЕсли ДополнительныеПараметры.Свойство("Новый") Тогда
		ПакетЗапросов_Новый();
	КонецЕсли;

КонецПроцедуры

#Область Команда_КонструкторЗапроса

&НаКлиенте
Функция ПолучитьКонструкторЗапроса(стрТекстЗапроса)
	Перем стрОшибка, чСтрока, чКолонка;
	
	Попытка
		КонструкторЗапроса = Новый КонструкторЗапроса(стрТекстЗапроса);
	Исключение
		
		стрОшибка = ОписаниеОшибки();
		РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка);
		
		ПоказатьПредупреждение(, стрОшибка, , Заголовок);
		Если ЗначениеЗаполнено(чСтрока) Тогда
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(чСтрока, чКолонка, чСтрока, чКолонка);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КонструкторЗапроса;
		
КонецФункции

&НаКлиенте
Процедура Команда_КонструкторЗапроса(Команда)
	
	стрТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	КомментарииЗапроса_СохранитьДанныеИсходногоЗапроса(стрТекстЗапроса);
	
	Если ЗначениеЗаполнено(стрТекстЗапроса) Тогда
		КонструкторЗапроса = ПолучитьКонструкторЗапроса(стрТекстЗапроса);
		Если КонструкторЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		КонструкторЗапроса = Новый КонструкторЗапроса;
	КонецЕсли;
	
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Если КонструкторЗапроса.ОткрытьМодально() Тогда
		стрТекстЗапроса = КонструкторЗапроса.Текст;
		КомментарииЗапроса_Восстановить(стрТекстЗапроса);
		ТекстЗапроса.УстановитьТекст(стрТекстЗапроса);
		ПоместитьРедактируемыйЗапрос();
		Модифицированность = Истина;
	КонецЕсли;
#Иначе
	
	Если ЗапросВКонструкторе > 0 Тогда
		Запрос_УстановитьВКонструкторе(ЗапросВКонструкторе, Ложь);
		ЗапросВКонструкторе = -1;
	КонецЕсли;
	
	ТекущийЗапрос = ПакетЗапросов_ТекущийЗапрос();
	Запрос_УстановитьВКонструкторе(ТекущийЗапрос, Истина);
	ИзвлечьРедактируемыйЗапрос();
	КонструкторЗапроса.Показать(Новый ОписаниеОповещения("Команда_КонструкторЗапроса_ОповещениеЗакрытияКонструктора", ЭтаФорма, ТекущийЗапрос));
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_КонструкторЗапроса_ОповещениеЗакрытияКонструктора(стрТекстЗапроса, ТекущийЗапрос) Экспорт

	Если НЕ Запрос_ПолучитьВКонструкторе(ТекущийЗапрос) Тогда
		Возврат;
	КонецЕсли;

	Запрос_УстановитьВКонструкторе(ТекущийЗапрос, Ложь);
	ЗапросВКонструкторе = -1;

	Если стрТекстЗапроса <> Неопределено Тогда
		КомментарииЗапроса_Восстановить(стрТекстЗапроса);
		Запрос_ПоместитьДанныеЗапроса(РедактируемыйЗапрос, стрТекстЗапроса);
		Модифицированность = Истина;
	КонецЕсли;
	
	ИзвлечьРедактируемыйЗапрос(ТекущийЗапрос);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗапрос(фИспользоватьВыделение)
	
	Перем НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки;
	
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	фВесьТекст = НЕ фИспользоватьВыделение ИЛИ (НачалоСтроки = КонецСтроки И НачалоКолонки = КонецКолонки);
	Если фВесьТекст Тогда
		стрТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	Иначе
		стрТекстЗапроса = Элементы.ТекстЗапроса.ВыделенныйТекст;
	КонецЕсли;
	
	Если ОпцияАвтосохранениеПередВыполнениемЗапроса И Модифицированность Тогда
		Автосохранить();
	КонецЕсли;
	
	стРезультат = ВыполнитьЗапросНаСервере(стрТекстЗапроса);
	Если ЗначениеЗаполнено(стРезультат.ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, стРезультат.ОписаниеОшибки, , Заголовок);
		ТекущийЭлемент = Элементы.ТекстЗапроса;
		Если ЗначениеЗаполнено(стРезультат.Строка) Тогда
			Если фВесьТекст Тогда
				Элементы.ТекстЗапроса.УстановитьГраницыВыделения(стРезультат.Строка, стРезультат.Колонка, стРезультат.Строка, стРезультат.Колонка);
			Иначе
				Если стРезультат.Строка = 1 Тогда
					чСтрока = НачалоСтроки;
					чКолонка = НачалоКолонки + стРезультат.Колонка - 1;
				КонецЕсли;
				Элементы.ТекстЗапроса.УстановитьГраницыВыделения(чСтрока, чКолонка, чСтрока, чКолонка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		РезультатНаФорме = -1;
		КоличествоВозвращенныхСтрокРезультата = ИзвлечьРезультат(стРезультат.КоличествоРезультатов);
		СтруктураЗаписиРезультата_Развернуть();
			
		ТекущаяСтрокаПакета = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
		ТекущаяСтрокаПакета.КоличествоСтрокРезультата = РезультатЗапроса.Количество();
		ВремяВыполнения = ФорматироватьДлительность(стРезультат.ВремяОкончания - стРезультат.ВремяНачала);
		Элементы.ПакетЗапросов.ТекущиеДанные.Инфо = Строка(КоличествоВозвращенныхСтрокРезультата) + " / " + ВремяВыполнения;
		
	КонецЕсли;
	
	ИмяЗапросаРезультата = Элементы.ПакетЗапросов.ТекущиеДанные.Имя;
	ОбновитьСостояниеЭлементовФормыАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ВыполнитьЗапрос(Команда)
	Если Элементы.ПакетЗапросов.ТекущаяСтрока <> Неопределено Тогда
		ВыполнитьЗапрос(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполнитьИзЗапросаНаСервере()
	Перем чСтрока, чКолонка;
	
	зЗапрос = Новый Запрос(ТекстЗапроса.ПолучитьТекст());
	Попытка
		зЗапрос.МенеджерВременныхТаблиц = ЗагрузитьВременныеТаблицы();
		НайденныеПараметры = зЗапрос.НайтиПараметры();
	Исключение
		стрОшибка = ОписаниеОшибки();
		РазобратьОшибкуЗапроса(стрОшибка, чСтрока, чКолонка);
		Возврат Новый Структура("ОписаниеОшибки, Строка, Колонка", стрОшибка, чСтрока, чКолонка);
	КонецПопытки;
	
	Для Каждого Параметр Из НайденныеПараметры Цикл
		
		Если Объект.ОпцияОбрабатывать__ И СтрНачинаетсяС(Параметр.Имя, МакроПараметр) Тогда
			Продолжить;
		КонецЕсли;

		маСтрокиПараметра = ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", Параметр.Имя));
		Если маСтрокиПараметра.Количество() > 0 Тогда
			СтрокаПараметра = маСтрокиПараметра[0];
		Иначе
			СтрокаПараметра = ПараметрыЗапроса.Добавить();
			СтрокаПараметра.Имя = Параметр.Имя;
			ПараметрыЗапроса_СохранитьЗначение(СтрокаПараметра.ПолучитьИдентификатор(), Параметр.ТипЗначения.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПараметра.ТипЗначения) Тогда
			СтрокаПараметра.ТипЗначения = Параметр.ТипЗначения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Команда_ПараметрыЗаполнитьИзЗапроса(Команда)
	
	стОшибка = ПараметрыЗаполнитьИзЗапросаНаСервере();
	
	Если ЗначениеЗаполнено(стОшибка) Тогда
		
		ПоказатьПредупреждение(, стОшибка.ОписаниеОшибки, , Заголовок);
		ТекущийЭлемент = Элементы.ТекстЗапроса;
		
		Если ЗначениеЗаполнено(стОшибка.Строка) Тогда
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(стОшибка.Строка, стОшибка.Колонка, стОшибка.Строка, стОшибка.Колонка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ЗаполнитьИзXML(Команда)
	
	стрОшибка = ЗаполнитьИзXMLНаСервере();
	Если ЗначениеЗаполнено(стрОшибка) Тогда
		ПоказатьПредупреждение(, стрОшибка, , Заголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПараметрыОчистить(Команда)
	ПараметрыЗапроса.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереносСтрокВТекст(ЭлементТекст)
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка;
	
	УстановитьГраницыВыделенияДляОбработкиСтрок(ЭлементТекст, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
	ОбрабатываемыйТекст = Новый ТекстовыйДокумент;
	ОбрабатываемыйТекст.УстановитьТекст(ЭлементТекст.ВыделенныйТекст);
	
	Для й = 1 По ОбрабатываемыйТекст.КоличествоСтрок() Цикл
		ОбрабатываемыйТекст.ЗаменитьСтроку(й, "|" + ОбрабатываемыйТекст.ПолучитьСтроку(й));
	КонецЦикла;
	
	ЭлементТекст.ВыделенныйТекст = ОбрабатываемыйТекст.ПолучитьТекст();
	ЭлементТекст.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ДобавитьПереносСтрокВТекст(Команда)
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос Тогда
		ДобавитьПереносСтрокВТекст(Элементы.ТекстЗапроса);
	ИначеЕсли Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаАлгоритм Тогда
		ДобавитьПереносСтрокВТекст(Элементы.ТекстАлгоритм);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УбратьПереносСтрокИзТекста(ЭлементТекст)
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка;
	
	УстановитьГраницыВыделенияДляОбработкиСтрок(ЭлементТекст, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
	ОбрабатываемыйТекст = Новый ТекстовыйДокумент;
	ОбрабатываемыйТекст.УстановитьТекст(ЭлементТекст.ВыделенныйТекст);
	
	Для й = 1 По ОбрабатываемыйТекст.КоличествоСтрок() Цикл
		стр = ОбрабатываемыйТекст.ПолучитьСтроку(й);
		Если Лев(СокрЛ(стр), 1) = "|" Тогда
			ъ = Найти(стр, "|");
			ОбрабатываемыйТекст.ЗаменитьСтроку(й, Лев(стр, ъ - 1) + Прав(стр, СтрДлина(стр) - ъ));
		КонецЕсли;
	КонецЦикла;
	
	ЭлементТекст.ВыделенныйТекст = ОбрабатываемыйТекст.ПолучитьТекст();
	ЭлементТекст.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_УбратьПереносСтрокИзТекста(Команда)
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос Тогда
		УбратьПереносСтрокИзТекста(Элементы.ТекстЗапроса);
	ИначеЕсли Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаАлгоритм Тогда
		УбратьПереносСтрокИзТекста(Элементы.ТекстАлгоритм);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментированиеСтрокВТекст(ЭлементТекст)
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка;
	
	УстановитьГраницыВыделенияДляОбработкиСтрок(ЭлементТекст, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
	ОбрабатываемыйТекст = Новый ТекстовыйДокумент;
	ОбрабатываемыйТекст.УстановитьТекст(ЭлементТекст.ВыделенныйТекст);
	
	Для й = 1 По ОбрабатываемыйТекст.КоличествоСтрок() Цикл
		ОбрабатываемыйТекст.ЗаменитьСтроку(й, "//" + ОбрабатываемыйТекст.ПолучитьСтроку(й));
	КонецЦикла;
	
	ЭлементТекст.ВыделенныйТекст = ОбрабатываемыйТекст.ПолучитьТекст();
	ЭлементТекст.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ДобавитьКомментированиеСтрокВТекст(Команда)
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос Тогда
		ДобавитьКомментированиеСтрокВТекст(Элементы.ТекстЗапроса);
	ИначеЕсли Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаАлгоритм Тогда
		ДобавитьКомментированиеСтрокВТекст(Элементы.ТекстАлгоритм);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментированиеСтрокИзТекста(ЭлементТекст)
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка;
	
	УстановитьГраницыВыделенияДляОбработкиСтрок(ЭлементТекст, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
	ОбрабатываемыйТекст = Новый ТекстовыйДокумент;
	ОбрабатываемыйТекст.УстановитьТекст(ЭлементТекст.ВыделенныйТекст);
	
	Для й = 1 По ОбрабатываемыйТекст.КоличествоСтрок() Цикл
		стр = ОбрабатываемыйТекст.ПолучитьСтроку(й);
		Если Лев(СокрЛ(стр), 2) = "//" Тогда
			ъ = Найти(стр, "//");
			ОбрабатываемыйТекст.ЗаменитьСтроку(й, Лев(стр, ъ - 1) + Прав(стр, СтрДлина(стр) - ъ - 1));
		КонецЕсли;
	КонецЦикла;
	
	ЭлементТекст.ВыделенныйТекст = ОбрабатываемыйТекст.ПолучитьТекст();
	ЭлементТекст.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_УбратьКомментированиеСтрокИзТекста(Команда)
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос Тогда
		УбратьКомментированиеСтрокИзТекста(Элементы.ТекстЗапроса);
	ИначеЕсли Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница = Элементы.СтраницаАлгоритм Тогда
		УбратьКомментированиеСтрокИзТекста(Элементы.ТекстАлгоритм);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда_СинтаксическийКонтрольЗапроса(Команда)
	
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница <> Элементы.СтраницаЗапрос Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ФорматироватьТекстЗапросаНаСервере(ТекстЗапроса.ПолучитьТекст());
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , Заголовок);
		ТекущийЭлемент = Элементы.ТекстЗапроса;
		Если ЗначениеЗаполнено(Результат.Строка) Тогда
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(Результат.Строка, Результат.Колонка, Результат.Строка, Результат.Колонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Команда_ФорматироватьТекстЗапроса(Команда)
	
	Если Элементы.ГруппаЗапросСтраницы.ТекущаяСтраница <> Элементы.СтраницаЗапрос Тогда
		Возврат;
	КонецЕсли;
	
	стрТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	КомментарииЗапроса_СохранитьДанныеИсходногоЗапроса(стрТекстЗапроса);
	Результат = ФорматироватьТекстЗапросаНаСервере(стрТекстЗапроса);
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , Заголовок);
		ТекущийЭлемент = Элементы.ТекстЗапроса;
		Если ЗначениеЗаполнено(Результат.Строка) Тогда
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(Результат.Строка, Результат.Колонка, Результат.Строка, Результат.Колонка);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	КомментарииЗапроса_Восстановить(Результат);
	Элементы.ТекстЗапроса.УстановитьГраницыВыделения(1, 1, ТекстЗапроса.КоличествоСтрок() + 1, 1);
	Элементы.ТекстЗапроса.ВыделенныйТекст = Результат;
	ПоместитьРедактируемыйЗапрос();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Команда_ПолучитьКодДляПерехватаВОтладчике(Команда)
	
	стрИмяФайлаОбработкиНаСервере = ПолучитьИмяФайлаОбработкиНаСервере();
	
	стрКод = "ВнешниеОбработки.Создать(""" + стрИмяФайлаОбработкиНаСервере + """, Ложь).СохранитьЗапрос(" + Формат(Объект.СеансИД, "ЧГ=0") + ", Запрос)";
	
	ПараметрыОткрытия = Новый Структура("
		|Объект,
	    |Заголовок,
		|КодДляКопирования,
		|Информация",
		Объект,
		"Код для перехвата запроса в отладчике",
		стрКод,
		"Для перехвата запроса в отладчике скопируйте и выполните по Shift+F9 указанный код.
		|Консоль запросов должна быть запущена в той же информационной базе под тем же пользователем.
		|Для получения запросов в консоль используйте команду на закладке текста запроса ""Перехват | Получить перехваченные запросы (Ctrl+F9)""
		|В настройках пользователя должна быть отключена защита от опасных действий."
	);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.Информация", ПараметрыОткрытия, ЭтаФорма, Ложь, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ДобавитьПерехваченныеЗапросы(Команда)
	
	стрПояснение = "Загрузка перехваченных запросов";
	
	ПоместитьРедактируемыйЗапрос();
	
	маФайлыЗапросов = ПолучитьСписокФайловНаСервереВоВременных("*." + Объект.РасширениеЗахваченныхЗапросов);
	
	й = 1;
	Для Каждого стрФайл Из маФайлыЗапросов Цикл
		Состояние("Загрузка перехваченного запроса: " + й + " из " + маФайлыЗапросов.Количество(), (й - 1) * 100 / маФайлыЗапросов.Количество(), стрПояснение);
		НовыйЗапрос = ПакетЗапросов.ПолучитьЭлементы().Добавить();
		Элементы.ПакетЗапросов.ТекущаяСтрока = НовыйЗапрос.ПолучитьИдентификатор();
		ЗаполнитьИзФайла(стрФайл);
		ПоместитьРедактируемыйЗапрос();
		й = й + 1;
	КонецЦикла;
	
	Состояние("Удаление временных файлов...", 100, стрПояснение);
	УдалитьФайлыНаСервере(маФайлыЗапросов);
	ПоказатьПредупреждение(, "Загруженно перехваченных запросов: " + маФайлыЗапросов.Количество(), , Заголовок);
	Модифицированность = Модифицированность ИЛИ маФайлыЗапросов.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_УдалитьПерехваченныеЗапросы(Команда)
	
	ПоместитьРедактируемыйЗапрос();
	
	маФайлыЗапросов = ПолучитьСписокФайловНаСервереВоВременных("*." + Объект.РасширениеЗахваченныхЗапросов);
	
	Состояние("Удаление временных файлов...", 100);
	УдалитьФайлыНаСервере(маФайлыЗапросов);
	ПоказатьПредупреждение(, "Удалено перехваченных запросов: " + маФайлыЗапросов.Количество(), , Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПакетЗапросовДобавить(Команда)
	Элементы.ПакетЗапросов.ТекущаяСтрока = ПакетЗапросов.ПолучитьЭлементы().Добавить().ПолучитьИдентификатор();
	Элементы.ПакетЗапросов.ТекущийЭлемент = Элементы.СписокЗапросовЗапрос;
	Элементы.ПакетЗапросов.ИзменитьСтроку();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПакетЗапросовПереместитьНаУровеньВверх(Команда)
	
	Строка = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
	Родитель = Строка.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		РодительРодителя = Родитель.ПолучитьРодителя();
		Если РодительРодителя = Неопределено Тогда
			ИндексВставки = ПакетЗапросов.ПолучитьЭлементы().Индекс(Родитель) + 1;
		Иначе
			ИндексВставки = РодительРодителя.ПолучитьЭлементы().Индекс(Родитель) + 1;
		КонецЕсли;
		НоваяСтрока = ПереместитьСтрокуДерева(ПакетЗапросов, Строка, ИндексВставки, РодительРодителя);
		Элементы.ПакетЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПакетЗапросовСкопировать(Команда)
	
	Строка = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
	НоваяСтрока = Строка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "ВКонструкторе, Инфо, КоличествоВозвращенныхСтрокРезультата, КоличествоСтрокРезультата, РазницаМеждуКоличествомВозвращенныхСтрокИКоличествомСтрокРезультата"); 
	НоваяСтрока.Имя = "Копия " + НоваяСтрока.Имя;
	Элементы.ПакетЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ПакетЗапросов.ТекущийЭлемент = Элементы.СписокЗапросовЗапрос;
	Элементы.ПакетЗапросов.ИзменитьСтроку();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ОбновитьРезультат(Команда)
	Если ИзвлечьРезультат() > 0 Тогда
		СтруктураЗаписиРезультата_Развернуть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда_РезультатЗапросаДеревоРазвернутьВсе(Команда)
	Для Каждого ЭлементДерева Из РезультатЗапросаДерево.ПолучитьЭлементы() Цикл
		Элементы.РезультатЗапросаДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Команда_РезультатЗапросаДеревоСвернутьВсе(Команда)
	Для Каждого ЭлементДерева Из РезультатЗапросаДерево.ПолучитьЭлементы() Цикл
		Элементы.РезультатЗапросаДерево.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Команда_РезультатВТабличныйДокумент(Команда)
	ПараметрыОткрытия = Новый Структура("Объект, АдресРезультатаЗапроса, РезультатВПакете, ИмяЗапроса, ВидРезультата", Объект, АдресРезультатаЗапроса, РезультатВПакете, ИмяЗапросаРезультата, ВидРезультата);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.ФормаТабличногоДокумента", ПараметрыОткрытия, ЭтаФорма, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Команда_ОтобразитьСкрытьПанельРезультатаИтоги(Команда)
	фОтображатьИтоги = НЕ Элементы.ОтобразитьСкрытьПанельРезультатаИтоги.Пометка;
	Элементы.ОтобразитьСкрытьПанельРезультатаИтоги.Пометка = фОтображатьИтоги;
	Элементы.РезультатЗапроса.Подвал = фОтображатьИтоги;
КонецПроцедуры

#Область Команда_ВыполнитьОбработку

&НаСервере
Функция ЗапуститьОбработкуНаСервере(фПострочно = Истина)
	
	ИмяМодуляДлительныеОперации = "ДлительныеОперации";
	ИмяМодуляСтандартныеПодсистемыСервер = "СтандартныеПодсистемыСервер";
	Если Метаданные.ОбщиеМодули.Найти(ИмяМодуляДлительныеОперации) = Неопределено ИЛИ Метаданные.ОбщиеМодули.Найти(ИмяМодуляСтандартныеПодсистемыСервер) = Неопределено Тогда
		Возврат Новый Структура("Успешно, ОписаниеОшибки", Ложь, "Модули БСП не найдены");
	КонецЕсли;
	
	МодульСтандартныеПодсистемыСервер = Вычислить(ИмяМодуляСтандартныеПодсистемыСервер);
	Попытка
		Версия = МодульСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Исключение
		Возврат Новый Структура("Успешно, ОписаниеОшибки", Ложь, "Модули БСП не найдены");
	КонецПопытки;
	
	маВерсия = СтрРазделить(Версия, ".");
	Если Число(маВерсия[0]) <= 2 И НЕ (Число(маВерсия[0]) = 2 И Число(маВерсия[1]) >= 3) Тогда
		Возврат Новый Структура("Успешно, ОписаниеОшибки", Ложь, СтрШаблон("Необходима БСП версии не ниже 2.3 (версия БСП текущей конфигурации %1)", Версия));
	КонецЕсли;
	
	ФоновоеЗаданиеАдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(стРезультатЗапроса);
	ПараметрыВыполнения.Добавить(РезультатВПакете);
	ПараметрыВыполнения.Добавить(ТекстАлгоритм.ПолучитьТекст());
	ПараметрыВыполнения.Добавить(фПострочно);
	ПараметрыВыполнения.Добавить(Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма);
	
	ПараметрыМетода = Новый Структура("
	|ЭтоВнешняяОбработка,
	|ДополнительнаяОбработкаСсылка,
	|ИмяОбработки,
	|ИмяМетода,
	|ПараметрыВыполнения",
	Истина,
	Неопределено,
	ИмяФайлаОбработкиНаСервере,
	"ВыполнитьАлгоритмПользователя",
	ПараметрыВыполнения);
	
	ФоновоеЗаданиеСостояниеПрогресса = Неопределено;
	ПараметрыФоновогоЗадания = Новый Массив;
	ПараметрыФоновогоЗадания.Добавить(ПараметрыМетода);
	ПараметрыФоновогоЗадания.Добавить(ФоновоеЗаданиеАдресРезультата);
	Задание = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыФоновогоЗадания, , Заголовок);
	ФоновоеЗаданиеИдентификатор = Задание.УникальныйИдентификатор;
	
	Возврат Новый Структура("Успешно", Истина);
	
КонецФункции

&НаСервере
Функция ПолучитьСостояниеФоновогоЗадания()
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗаданиеИдентификатор));
	СостояниеЗадания = Новый Структура("СостояниеПрогресса, Начало, Состояние, ИнформацияОбОшибке, СообщенияПользователю");
	ЗаполнитьЗначенияСвойств(СостояниеЗадания, ФоновоеЗадание, "Начало, Состояние, ИнформацияОбОшибке");
	
	Если МетодИсполненияКода = 2 ИЛИ МетодИсполненияКода = 4 Тогда
		СостояниеЗадания.СостояниеПрогресса = ФоновоеЗаданиеСостояниеПрогресса;
	КонецЕсли;
	
	СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	СостояниеЗадания.СообщенияПользователю = Новый Массив;
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Если СтрНачинаетсяС(Сообщение.Текст, ФоновоеЗаданиеАдресРезультата) Тогда
			СостояниеИзСообщения = РеквизитФормыВЗначение("Объект").СтрокаВЗначение(Прав(Сообщение.Текст, СтрДлина(Сообщение.Текст) - СтрДлина(ФоновоеЗаданиеАдресРезультата)));
			СостояниеЗадания.СостояниеПрогресса = СостояниеИзСообщения;
			ФоновоеЗаданиеСостояниеПрогресса = СостояниеИзСообщения;
		Иначе
			СостояниеЗадания.СообщенияПользователю.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		СостояниеЗадания.Состояние = 0
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		СостояниеЗадания.Состояние = 1
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		СостояниеЗадания.Состояние = 2
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		СостояниеЗадания.Состояние = 3
	КонецЕсли;
	
	Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		СостояниеЗадания.ИнформацияОбОшибке = ПолучитьПредставлениеИнформацииОбОшибке(ФоновоеЗадание.ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат СостояниеЗадания;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьСостояниеВыполненияАлгоритма(СостояниеПрогресса = Неопределено, Секунды = Неопределено, фЧерезСостояние = Ложь)
	
	Если Секунды = Неопределено Тогда
		СостояниеВыполнения = "";
		Элементы.ВыполнитьОбработку.Заголовок = "Выполнить";
		Элементы.ВыполнитьОбработку.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		ОбновитьСостояниеЭлементовФормыАлгоритма();
	Иначе
		
		стрВремяВыполнения = ВремяИзСекунд(Секунды);
		
		Если СостояниеПрогресса <> Неопределено Тогда
			стрПрогресс = Формат(СостояниеПрогресса.Прогресс, "ЧЦ=3; ЧДЦ=0; ЧН=") + "%";
			Если СостояниеПрогресса.Прогресс > 0 И СостояниеПрогресса.ДлительностьНаМоментПрогресса > 1000 Тогда
				стрВремяОсталось = СтрШаблон("осталось примерно %1", ВремяИзСекунд(Окр(СостояниеПрогресса.ДлительностьНаМоментПрогресса / СостояниеПрогресса.Прогресс * (100 - СостояниеПрогресса.Прогресс) / 1000)));
			Иначе
				стрВремяОсталось = "";
			КонецЕсли;
			стрПояснение = СтрШаблон("%1 прошло %2 %3", стрПрогресс, стрВремяВыполнения, стрВремяОсталось);
		Иначе
			стрПрогресс = "";
			стрПояснение = СтрШаблон("%1 прошло %2", стрПрогресс, стрВремяВыполнения);
		КонецЕсли;
		
		Если фЧерезСостояние Тогда
			Состояние("Выполнение алгоритма", СостояниеПрогресса.Прогресс, стрПояснение);
		Иначе
			СостояниеВыполнения = стрПояснение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеФоновогоЗадания() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОтобразитьСостояниеВыполненияАлгоритма();
		Возврат;
	КонецЕсли;
	
	СостояниеЗадания = ПолучитьСостояниеФоновогоЗадания();
	
	Если СостояниеЗадания.СообщенияПользователю <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из СостояниеЗадания.СообщенияПользователю Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если СостояниеЗадания.Состояние = 0 Тогда
		ОтобразитьСостояниеВыполненияАлгоритма(СостояниеЗадания.СостояниеПрогресса, ТекущаяДата() - СостояниеЗадания.Начало);
		ПодключитьОбработчикОжидания("ОтобразитьСостояниеФоновогоЗадания", Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма / 1000 / 2, Истина);
	ИначеЕсли СостояниеЗадания.Состояние = 2 Тогда
		ПоказатьПредупреждение(, СостояниеЗадания.ИнформацияОбОшибке, , Заголовок);
		ФоновоеЗаданиеИдентификатор = "";
		ОтобразитьСостояниеВыполненияАлгоритма();
	Иначе
		ФоновоеЗаданиеИдентификатор = "";
		ОтобразитьСостояниеВыполненияАлгоритма();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьКод(ЭтотКод, Выборка, Параметры)
	Выполнить(ЭтотКод);	
КонецФункции

&НаСервере
Функция ВыполнитьАлгоритм()
	
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	маРезультатЗапроса = стРезультатЗапроса.Результат;
	стРезультат = маРезультатЗапроса[Число(РезультатВПакете) - 1];
	рзВыборка = стРезультат.Результат;
	выбВыборка = рзВыборка.Выбрать();
	
	Попытка
		ВыполнитьКод(ТекстАлгоритм.ПолучитьТекст(), выбВыборка, стРезультатЗапроса.Параметры);
	Исключение
		стрСообщениеОбОшибке = ОписаниеОшибки();
		Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки", Ложь, Ложь, стрСообщениеОбОшибке);
	КонецПопытки;
	
	Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки", Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьАлгоритмПострочно(АдресРезультатаЗапроса, РезультатВПакете, ТекстАлгоритма)
	
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	маРезультатЗапроса = стРезультатЗапроса.Результат;
	стРезультат = маРезультатЗапроса[Число(РезультатВПакете) - 1];
	рзВыборка = стРезультат.Результат;
	выбВыборка = рзВыборка.Выбрать();
	
	Попытка
		Пока выбВыборка.Следующий() Цикл
			ВыполнитьКод(ТекстАлгоритма, выбВыборка, стРезультатЗапроса.Параметры);
		КонецЦикла;
	Исключение
		стрСообщениеОбОшибке = ОписаниеОшибки();
		Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки", Ложь, Ложь, стрСообщениеОбОшибке);
	КонецПопытки;
	
	Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки, Прогресс", Истина, Ложь, Неопределено, 100);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьАлгоритмНаСервереПострочно(АдресСостояния, АдресРезультатаЗапроса, РезультатВПакете, ТекстАлгоритма, ОпцияИнтервалОбновленияВыполненияАлгоритма)
	
	стСостояние = ПолучитьИзВременногоХранилища(АдресСостояния);
	
	Если стСостояние = Неопределено Тогда
		стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
		маРезультатЗапроса = стРезультатЗапроса.Результат;
		стРезультат = маРезультатЗапроса[Число(РезультатВПакете) - 1];
		рзВыборка = стРезультат.Результат;
		выбВыборка = рзВыборка.Выбрать();
		стСостояние = Новый Структура("Выборка, Параметры, КоличествоВсего, КоличествоСделано, Начало, НачалоВМиллисекундах", выбВыборка, стРезультатЗапроса.Параметры, выбВыборка.Количество(), 0, ТекущаяДата(), ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли;
	
	выбВыборка = стСостояние.Выборка;
	чКоличествоСделано = стСостояние.КоличествоСделано;
	чМоментОкончанияПорции = ТекущаяУниверсальнаяДатаВМиллисекундах() + ОпцияИнтервалОбновленияВыполненияАлгоритма;
	
	Попытка
		
		фПродолжать = Ложь;
		Пока выбВыборка.Следующий() Цикл
			
			ВыполнитьКод(ТекстАлгоритма, выбВыборка, стСостояние.Параметры);
			чКоличествоСделано = чКоличествоСделано + 1;
			
			Если ТекущаяУниверсальнаяДатаВМиллисекундах() >= чМоментОкончанияПорции Тогда
				фПродолжать = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		стСостояние.КоличествоСделано = чКоличествоСделано;
		
	Исключение
		стрСообщениеОбОшибке = ОписаниеОшибки();
		Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки", Ложь, Ложь, стрСообщениеОбОшибке);
	КонецПопытки;
	
	Если фПродолжать Тогда
		стСостояние.Выборка = выбВыборка;
		ПоместитьВоВременноеХранилище(стСостояние, АдресСостояния);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресСостояния);
	КонецЕсли;
	
	Возврат Новый Структура("Успешно, Продолжать, ОписаниеОшибки, Прогресс, Начало, ДлительностьНаМоментПрогресса", Истина, фПродолжать, Неопределено, стСостояние.КоличествоСделано * 100 / стСостояние.КоличествоВсего, стСостояние.Начало, ТекущаяУниверсальнаяДатаВМиллисекундах() - стСостояние.НачалоВМиллисекундах);
	
КонецФункции

&НаКлиенте
Функция ВыполнитьАлгоритмПострочноСИндикацией()
	
	Если НЕ ЗначениеЗаполнено(АдресСостояния) Тогда
		АдресСостояния = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресСостояния);
	КонецЕсли;
	
	Пока Истина Цикл
		
		стРезультат = ВыполнитьАлгоритмНаСервереПострочно(АдресСостояния, АдресРезультатаЗапроса, РезультатВПакете, ТекстАлгоритм.ПолучитьТекст(), Объект.ОпцияИнтервалОбновленияВыполненияАлгоритма);
		
		Если НЕ стРезультат.Успешно Тогда
			Прервать;
		КонецЕсли;
		
		ОтобразитьСостояниеВыполненияАлгоритма(стРезультат, ТекущаяДата() - стРезультат.Начало, Истина);
		ОбработкаПрерыванияПользователя();
		
		Если НЕ стРезультат.Продолжать Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтобразитьСостояниеВыполненияАлгоритма();
	
	Возврат стРезультат;
	
КонецФункции

&НаСервере
Процедура ПрерватьФоновоеЗадание()
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗаданиеИдентификатор));
	ФоновоеЗадание.Отменить();
	ФоновоеЗаданиеИдентификатор = "";
КонецПроцедуры

&НаКлиенте
Процедура Команда_ВыполнитьОбработку(Команда)
	
	Если НЕ ЗначениеЗаполнено(РезультатВПакете) ИЛИ Число(РезультатВПакете) <= 0 Тогда
		ПоказатьПредупреждение(, "Выполнение невозможно - результат запроса отсутствует", , Заголовок);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФоновоеЗаданиеИдентификатор) Тогда
		//прерывание выполнения
		ПрерватьФоновоеЗадание();
		ОтобразитьСостояниеФоновогоЗадания();
		ПоказатьПредупреждение(, "Выполнение прервано пользователем!", , Заголовок);
		Возврат;
	КонецЕсли;
	
	Если МетодИсполненияКода = 0 Тогда
		стРезультат = ВыполнитьАлгоритм();
	ИначеЕсли МетодИсполненияКода = 1 Тогда
		стРезультат = ВыполнитьАлгоритмПострочно(АдресРезультатаЗапроса, РезультатВПакете, ТекстАлгоритм.ПолучитьТекст());
	ИначеЕсли МетодИсполненияКода = 2 Тогда
		стРезультат = ВыполнитьАлгоритмПострочноСИндикацией();
	ИначеЕсли МетодИсполненияКода = 3 Тогда
		//простое выполнение в фоне
		стРезультат = ЗапуститьОбработкуНаСервере(Ложь);
	ИначеЕсли МетодИсполненияКода = 4 Тогда
		//построчное выполнение в фоне с индикацией
		стРезультат = ЗапуститьОбработкуНаСервере(Истина);
	Иначе
		стРезультат = Новый Структура("Успешно, ОписаниеОшибки", Ложь, "Неверный метод исполнения кода");
	КонецЕсли;
	
	Если МетодИсполненияКода = 3 ИЛИ МетодИсполненияКода = 4 Тогда
		Если стРезультат.Успешно Тогда
			Элементы.ВыполнитьОбработку.Заголовок = "Прервать";
			//Картинки = ПолучитьИзВременногоХранилища(Объект.Картинки);
			//Элементы.ВыполнитьОбработку.Картинка = Картинки.ПрогрессВыполнения;
			Элементы.ВыполнитьОбработку.Картинка = БиблиотекаКартинок.Остановить;
			ОтобразитьСостояниеФоновогоЗадания();
		КонецЕсли;
	КонецЕсли;		

	Если НЕ стРезультат.Успешно Тогда
		ПоказатьПредупреждение(, стРезультат.ОписаниеОшибки, , Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОкончаниеВыбораПредопределенного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ДанныеФормыВыборПредопределенного = РезультатЗакрытия.ДанныеФормы;
		Элементы.ТекстЗапроса.ВыделенныйТекст = РезультатЗакрытия.Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда_ВставитьПредопределенноеЗначение(Команда)
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка;
	
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	ПараметрыОповещения = Новый Структура("НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка", НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеВыбораПредопределенного", ЭтаФорма, ПараметрыОповещения);
	ПараметрыОткрытия = Новый Структура(
		"Объект, ДанныеФормы, ТекстЗапроса, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка",
		Объект, ДанныеФормыВыборПредопределенного, ТекстЗапроса.ПолучитьТекст(), НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.ВыборПредопределенного", ПараметрыОткрытия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуЗнвченийРезультата(Команда)
КонецПроцедуры

&НаКлиенте
Процедура Команда_РезультатВПараметр(Команда)
	
	тзТаблица = ИзвлечьРезультатКакКонтейнер();
	
	ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", "ПараметрыЗапроса", Неопределено, "ТипЗначения");
	ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияСтроки", ЭтаФорма, ПараметрыОповещения);
	ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения, ТипКонтейнера, Имя, ВЗапросРазрешено", Объект, тзТаблица, 3, ИмяЗапросаРезультата, Ложь);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.РедактированиеТипа", ПараметрыОткрытия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_СправкаАлгоритм(Команда)
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Заголовок", "СправкаАлгоритм", "Обработка результата запроса кодом");
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.Справка", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

#Область Команда_ПолучитьКодСПараметрами

&НаКлиенте
Процедура Команда_ПолучитьКодСПараметрами(Команда)
	
	Если Элементы.ПакетЗапросов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//В качестве имени запроса попробуем использовать его название. Если не получится - тогда просто "Запрос".
	ИмяЗапроса = Элементы.ПакетЗапросов.ТекущиеДанные.Имя;
	Если НЕ ИмяКорректно(ИмяЗапроса) Тогда
		ИмяЗапроса = "Запрос";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("
		|Объект,
		|ИмяЗапроса,
		|ТекстЗапроса,
		|ПараметрыЗапроса,
	    |Заголовок,
		|Содержание",
		Объект,
		ИмяЗапроса,
		ТекстЗапроса.ПолучитьТекст(),
		ПараметрыЗапроса_ПолучитьКакСтроку(),
		"Код для выполнения запроса на встроенном языке 1С"
	);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов9000.Форма.ФормаКода", ПараметрыОткрытия, ЭтаФорма, Ложь, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти //Команда_ПолучитьКодСПараметрами

&НаКлиенте
Процедура Команда_ОтобразитьСкрытьПакетРезультатаЗапроса(Команда)
	фВидимостьПакетаРезультатаЗапроса = НЕ Элементы.ОтобразитьСкрытьПакетРезультатаЗапроса.Пометка;
	Элементы.ОтобразитьСкрытьПакетРезультатаЗапроса.Пометка = фВидимостьПакетаРезультатаЗапроса;
	Элементы.ПакетРезультатаЗапроса.Видимость = фВидимостьПакетаРезультатаЗапроса;
	Элементы.РезультатВПакете.Видимость = НЕ фВидимостьПакетаРезультатаЗапроса;
	Объект.СохраняемыеСостояния.Вставить("ВидимостьПакетаРезультатаЗапроса", фВидимостьПакетаРезультатаЗапроса);
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗапросаРядомСТекстомНаСервере()
	Если Элементы.ПараметрыЗапросаРядомСТекстом.Пометка Тогда
		Элементы.Переместить(Элементы.ПараметрыЗапроса, Элементы.ГруппаПараметры);
	Иначе
		Элементы.Переместить(Элементы.ПараметрыЗапроса, Элементы.СтраницаПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПараметрыЗапросаРядомСТекстом(Команда)
	Элементы.ПараметрыЗапросаРядомСТекстом.Пометка = НЕ Элементы.ПараметрыЗапросаРядомСТекстом.Пометка;
	СохраняемыеСостояния_Сохранить("ПараметрыЗапросаРядомСТекстом", Элементы.ПараметрыЗапросаРядомСТекстом.Пометка);
	ПараметрыЗапросаРядомСТекстомНаСервере();
КонецПроцедуры

#КонецОбласти //ИнтерактивныеКоманды

#Если Клиент Тогда
	
стрСигнатураКонсоли = "КонсольЗапросов9000";
стрФильтрСохранения = "Файл запросов (*.q9)|*.q9";
стрРасширениеАвтосохранения = "q9save";
чВерсияФормата = 11;
	
#КонецЕсли